var Qn=Object.defineProperty;var gt=e=>{throw TypeError(e)};var Zn=(e,t,n)=>t in e?Qn(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;var A=(e,t,n)=>Zn(e,typeof t!="symbol"?t+"":t,n),mt=(e,t,n)=>t.has(e)||gt("Cannot "+n);var B=(e,t,n)=>(mt(e,t,"read from private field"),n?n.call(e):t.get(e)),yt=(e,t,n)=>t.has(e)?gt("Cannot add the same private member more than once"):t instanceof WeakSet?t.add(e):t.set(e,n),wt=(e,t,n,r)=>(mt(e,t,"write to private field"),r?r.call(e,n):t.set(e,n),n);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))r(o);new MutationObserver(o=>{for(const i of o)if(i.type==="childList")for(const s of i.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&r(s)}).observe(document,{childList:!0,subtree:!0});function n(o){const i={};return o.integrity&&(i.integrity=o.integrity),o.referrerPolicy&&(i.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?i.credentials="include":o.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function r(o){if(o.ep)return;o.ep=!0;const i=n(o);fetch(o.href,i)}})();var Me,x,Jt,q,xt,Gt,je,Ze,He,ze,Yt,ne={},Kt=[],er=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i,et=Array.isArray;function U(e,t){for(var n in t)e[n]=t[n];return e}function Xt(e){var t=e.parentNode;t&&t.removeChild(e)}function Qt(e,t,n){var r,o,i,s={};for(i in t)i=="key"?r=t[i]:i=="ref"?o=t[i]:s[i]=t[i];if(arguments.length>2&&(s.children=arguments.length>3?Me.call(arguments,2):n),typeof e=="function"&&e.defaultProps!=null)for(i in e.defaultProps)s[i]===void 0&&(s[i]=e.defaultProps[i]);return me(e,s,r,o,null)}function me(e,t,n,r,o){var i={type:e,props:t,key:n,ref:r,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,constructor:void 0,__v:o??++Jt,__i:-1,__u:0};return o==null&&x.vnode!=null&&x.vnode(i),i}function Oe(e){return e.children}function ye(e,t){this.props=e,this.context=t}function W(e,t){if(t==null)return e.__?W(e.__,e.__i+1):null;for(var n;t<e.__k.length;t++)if((n=e.__k[t])!=null&&n.__e!=null)return n.__e;return typeof e.type=="function"?W(e):null}function Zt(e){var t,n;if((e=e.__)!=null&&e.__c!=null){for(e.__e=e.__c.base=null,t=0;t<e.__k.length;t++)if((n=e.__k[t])!=null&&n.__e!=null){e.__e=e.__c.base=n.__e;break}return Zt(e)}}function De(e){(!e.__d&&(e.__d=!0)&&q.push(e)&&!ke.__r++||xt!==x.debounceRendering)&&((xt=x.debounceRendering)||Gt)(ke)}function ke(){var e,t,n,r,o,i,s,a;for(q.sort(je);e=q.shift();)e.__d&&(t=q.length,r=void 0,i=(o=(n=e).__v).__e,s=[],a=[],n.__P&&((r=U({},o)).__v=o.__v+1,x.vnode&&x.vnode(r),tt(n.__P,r,o,n.__n,n.__P.namespaceURI,32&o.__u?[i]:null,s,i??W(o),!!(32&o.__u),a),r.__v=o.__v,r.__.__k[r.__i]=r,nn(s,r,a),r.__e!=i&&Zt(r)),q.length>t&&q.sort(je));ke.__r=0}function en(e,t,n,r,o,i,s,a,c,u,f){var l,d,h,_,b,g=r&&r.__k||Kt,v=t.length;for(n.__d=c,tr(n,t,g),c=n.__d,l=0;l<v;l++)(h=n.__k[l])!=null&&typeof h!="boolean"&&typeof h!="function"&&(d=h.__i===-1?ne:g[h.__i]||ne,h.__i=l,tt(e,h,d,o,i,s,a,c,u,f),_=h.__e,h.ref&&d.ref!=h.ref&&(d.ref&&nt(d.ref,null,h),f.push(h.ref,h.__c||_,h)),b==null&&_!=null&&(b=_),65536&h.__u||d.__k===h.__k?c=tn(h,c,e):typeof h.type=="function"&&h.__d!==void 0?c=h.__d:_&&(c=_.nextSibling),h.__d=void 0,h.__u&=-196609);n.__d=c,n.__e=b}function tr(e,t,n){var r,o,i,s,a,c=t.length,u=n.length,f=u,l=0;for(e.__k=[],r=0;r<c;r++)s=r+l,(o=e.__k[r]=(o=t[r])==null||typeof o=="boolean"||typeof o=="function"?null:typeof o=="string"||typeof o=="number"||typeof o=="bigint"||o.constructor==String?me(null,o,null,null,null):et(o)?me(Oe,{children:o},null,null,null):o.constructor===void 0&&o.__b>0?me(o.type,o.props,o.key,o.ref?o.ref:null,o.__v):o)!=null?(o.__=e,o.__b=e.__b+1,a=nr(o,n,s,f),o.__i=a,i=null,a!==-1&&(f--,(i=n[a])&&(i.__u|=131072)),i==null||i.__v===null?(a==-1&&l--,typeof o.type!="function"&&(o.__u|=65536)):a!==s&&(a==s-1?l=a-s:a==s+1?l++:a>s?f>c-s?l+=a-s:l--:a<s&&l++,a!==r+l&&(o.__u|=65536))):(i=n[s])&&i.key==null&&i.__e&&!(131072&i.__u)&&(i.__e==e.__d&&(e.__d=W(i)),qe(i,i,!1),n[s]=null,f--);if(f)for(r=0;r<u;r++)(i=n[r])!=null&&!(131072&i.__u)&&(i.__e==e.__d&&(e.__d=W(i)),qe(i,i))}function tn(e,t,n){var r,o;if(typeof e.type=="function"){for(r=e.__k,o=0;r&&o<r.length;o++)r[o]&&(r[o].__=e,t=tn(r[o],t,n));return t}e.__e!=t&&(t&&e.type&&!n.contains(t)&&(t=W(e)),n.insertBefore(e.__e,t||null),t=e.__e);do t=t&&t.nextSibling;while(t!=null&&t.nodeType===8);return t}function nr(e,t,n,r){var o=e.key,i=e.type,s=n-1,a=n+1,c=t[n];if(c===null||c&&o==c.key&&i===c.type&&!(131072&c.__u))return n;if(r>(c!=null&&!(131072&c.__u)?1:0))for(;s>=0||a<t.length;){if(s>=0){if((c=t[s])&&!(131072&c.__u)&&o==c.key&&i===c.type)return s;s--}if(a<t.length){if((c=t[a])&&!(131072&c.__u)&&o==c.key&&i===c.type)return a;a++}}return-1}function kt(e,t,n){t[0]==="-"?e.setProperty(t,n??""):e[t]=n==null?"":typeof n!="number"||er.test(t)?n:n+"px"}function pe(e,t,n,r,o){var i;e:if(t==="style")if(typeof n=="string")e.style.cssText=n;else{if(typeof r=="string"&&(e.style.cssText=r=""),r)for(t in r)n&&t in n||kt(e.style,t,"");if(n)for(t in n)r&&n[t]===r[t]||kt(e.style,t,n[t])}else if(t[0]==="o"&&t[1]==="n")i=t!==(t=t.replace(/(PointerCapture)$|Capture$/i,"$1")),t=t.toLowerCase()in e||t==="onFocusOut"||t==="onFocusIn"?t.toLowerCase().slice(2):t.slice(2),e.l||(e.l={}),e.l[t+i]=n,n?r?n.u=r.u:(n.u=Ze,e.addEventListener(t,i?ze:He,i)):e.removeEventListener(t,i?ze:He,i);else{if(o=="http://www.w3.org/2000/svg")t=t.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if(t!="width"&&t!="height"&&t!="href"&&t!="list"&&t!="form"&&t!="tabIndex"&&t!="download"&&t!="rowSpan"&&t!="colSpan"&&t!="role"&&t!="popover"&&t in e)try{e[t]=n??"";break e}catch{}typeof n=="function"||(n==null||n===!1&&t[4]!=="-"?e.removeAttribute(t):e.setAttribute(t,t=="popover"&&n==1?"":n))}}function St(e){return function(t){if(this.l){var n=this.l[t.type+e];if(t.t==null)t.t=Ze++;else if(t.t<n.u)return;return n(x.event?x.event(t):t)}}}function tt(e,t,n,r,o,i,s,a,c,u){var f,l,d,h,_,b,g,v,y,Q,N,fe,Z,vt,he,Ie,I=t.type;if(t.constructor!==void 0)return null;128&n.__u&&(c=!!(32&n.__u),i=[a=t.__e=n.__e]),(f=x.__b)&&f(t);e:if(typeof I=="function")try{if(v=t.props,y="prototype"in I&&I.prototype.render,Q=(f=I.contextType)&&r[f.__c],N=f?Q?Q.props.value:f.__:r,n.__c?g=(l=t.__c=n.__c).__=l.__E:(y?t.__c=l=new I(v,N):(t.__c=l=new ye(v,N),l.constructor=I,l.render=or),Q&&Q.sub(l),l.props=v,l.state||(l.state={}),l.context=N,l.__n=r,d=l.__d=!0,l.__h=[],l._sb=[]),y&&l.__s==null&&(l.__s=l.state),y&&I.getDerivedStateFromProps!=null&&(l.__s==l.state&&(l.__s=U({},l.__s)),U(l.__s,I.getDerivedStateFromProps(v,l.__s))),h=l.props,_=l.state,l.__v=t,d)y&&I.getDerivedStateFromProps==null&&l.componentWillMount!=null&&l.componentWillMount(),y&&l.componentDidMount!=null&&l.__h.push(l.componentDidMount);else{if(y&&I.getDerivedStateFromProps==null&&v!==h&&l.componentWillReceiveProps!=null&&l.componentWillReceiveProps(v,N),!l.__e&&(l.shouldComponentUpdate!=null&&l.shouldComponentUpdate(v,l.__s,N)===!1||t.__v===n.__v)){for(t.__v!==n.__v&&(l.props=v,l.state=l.__s,l.__d=!1),t.__e=n.__e,t.__k=n.__k,t.__k.forEach(function(de){de&&(de.__=t)}),fe=0;fe<l._sb.length;fe++)l.__h.push(l._sb[fe]);l._sb=[],l.__h.length&&s.push(l);break e}l.componentWillUpdate!=null&&l.componentWillUpdate(v,l.__s,N),y&&l.componentDidUpdate!=null&&l.__h.push(function(){l.componentDidUpdate(h,_,b)})}if(l.context=N,l.props=v,l.__P=e,l.__e=!1,Z=x.__r,vt=0,y){for(l.state=l.__s,l.__d=!1,Z&&Z(t),f=l.render(l.props,l.state,l.context),he=0;he<l._sb.length;he++)l.__h.push(l._sb[he]);l._sb=[]}else do l.__d=!1,Z&&Z(t),f=l.render(l.props,l.state,l.context),l.state=l.__s;while(l.__d&&++vt<25);l.state=l.__s,l.getChildContext!=null&&(r=U(U({},r),l.getChildContext())),y&&!d&&l.getSnapshotBeforeUpdate!=null&&(b=l.getSnapshotBeforeUpdate(h,_)),en(e,et(Ie=f!=null&&f.type===Oe&&f.key==null?f.props.children:f)?Ie:[Ie],t,n,r,o,i,s,a,c,u),l.base=t.__e,t.__u&=-161,l.__h.length&&s.push(l),g&&(l.__E=l.__=null)}catch(de){if(t.__v=null,c||i!=null){for(t.__u|=c?160:32;a&&a.nodeType===8&&a.nextSibling;)a=a.nextSibling;i[i.indexOf(a)]=null,t.__e=a}else t.__e=n.__e,t.__k=n.__k;x.__e(de,t,n)}else i==null&&t.__v===n.__v?(t.__k=n.__k,t.__e=n.__e):t.__e=rr(n.__e,t,n,r,o,i,s,c,u);(f=x.diffed)&&f(t)}function nn(e,t,n){t.__d=void 0;for(var r=0;r<n.length;r++)nt(n[r],n[++r],n[++r]);x.__c&&x.__c(t,e),e.some(function(o){try{e=o.__h,o.__h=[],e.some(function(i){i.call(o)})}catch(i){x.__e(i,o.__v)}})}function rr(e,t,n,r,o,i,s,a,c){var u,f,l,d,h,_,b,g=n.props,v=t.props,y=t.type;if(y==="svg"?o="http://www.w3.org/2000/svg":y==="math"?o="http://www.w3.org/1998/Math/MathML":o||(o="http://www.w3.org/1999/xhtml"),i!=null){for(u=0;u<i.length;u++)if((h=i[u])&&"setAttribute"in h==!!y&&(y?h.localName===y:h.nodeType===3)){e=h,i[u]=null;break}}if(e==null){if(y===null)return document.createTextNode(v);e=document.createElementNS(o,y,v.is&&v),i=null,a=!1}if(y===null)g===v||a&&e.data===v||(e.data=v);else{if(i=i&&Me.call(e.childNodes),g=n.props||ne,!a&&i!=null)for(g={},u=0;u<e.attributes.length;u++)g[(h=e.attributes[u]).name]=h.value;for(u in g)if(h=g[u],u!="children"){if(u=="dangerouslySetInnerHTML")l=h;else if(u!=="key"&&!(u in v)){if(u=="value"&&"defaultValue"in v||u=="checked"&&"defaultChecked"in v)continue;pe(e,u,null,h,o)}}for(u in v)h=v[u],u=="children"?d=h:u=="dangerouslySetInnerHTML"?f=h:u=="value"?_=h:u=="checked"?b=h:u==="key"||a&&typeof h!="function"||g[u]===h||pe(e,u,h,g[u],o);if(f)a||l&&(f.__html===l.__html||f.__html===e.innerHTML)||(e.innerHTML=f.__html),t.__k=[];else if(l&&(e.innerHTML=""),en(e,et(d)?d:[d],t,n,r,y==="foreignObject"?"http://www.w3.org/1999/xhtml":o,i,s,i?i[0]:n.__k&&W(n,0),a,c),i!=null)for(u=i.length;u--;)i[u]!=null&&Xt(i[u]);a||(u="value",_!==void 0&&(_!==e[u]||y==="progress"&&!_||y==="option"&&_!==g[u])&&pe(e,u,_,g[u],o),u="checked",b!==void 0&&b!==e[u]&&pe(e,u,b,g[u],o))}return e}function nt(e,t,n){try{if(typeof e=="function"){var r=typeof e.__u=="function";r&&e.__u(),r&&t==null||(e.__u=e(t))}else e.current=t}catch(o){x.__e(o,n)}}function qe(e,t,n){var r,o;if(x.unmount&&x.unmount(e),(r=e.ref)&&(r.current&&r.current!==e.__e||nt(r,null,t)),(r=e.__c)!=null){if(r.componentWillUnmount)try{r.componentWillUnmount()}catch(i){x.__e(i,t)}r.base=r.__P=null}if(r=e.__k)for(o=0;o<r.length;o++)r[o]&&qe(r[o],t,n||typeof e.type!="function");n||e.__e==null||Xt(e.__e),e.__c=e.__=e.__e=e.__d=void 0}function or(e,t,n){return this.constructor(e,n)}function ir(e,t,n){var r,o,i,s;x.__&&x.__(e,t),o=(r=typeof n=="function")?null:t.__k,i=[],s=[],tt(t,e=(!r&&n||t).__k=Qt(Oe,null,[e]),o||ne,ne,t.namespaceURI,!r&&n?[n]:o?null:t.firstChild?Me.call(t.childNodes):null,i,!r&&n?n:o?o.__e:t.firstChild,r,s),nn(i,e,s)}function sr(e,t){var n={__c:t="__cC"+Yt++,__:e,Consumer:function(r,o){return r.children(o)},Provider:function(r){var o,i;return this.getChildContext||(o=[],(i={})[t]=this,this.getChildContext=function(){return i},this.componentWillUnmount=function(){o=null},this.shouldComponentUpdate=function(s){this.props.value!==s.value&&o.some(function(a){a.__e=!0,De(a)})},this.sub=function(s){o.push(s);var a=s.componentWillUnmount;s.componentWillUnmount=function(){o&&o.splice(o.indexOf(s),1),a&&a.call(s)}}),r.children}};return n.Provider.__=n.Consumer.contextType=n}Me=Kt.slice,x={__e:function(e,t,n,r){for(var o,i,s;t=t.__;)if((o=t.__c)&&!o.__)try{if((i=o.constructor)&&i.getDerivedStateFromError!=null&&(o.setState(i.getDerivedStateFromError(e)),s=o.__d),o.componentDidCatch!=null&&(o.componentDidCatch(e,r||{}),s=o.__d),s)return o.__E=o}catch(a){e=a}throw e}},Jt=0,ye.prototype.setState=function(e,t){var n;n=this.__s!=null&&this.__s!==this.state?this.__s:this.__s=U({},this.state),typeof e=="function"&&(e=e(U({},n),this.props)),e&&U(n,e),e!=null&&this.__v&&(t&&this._sb.push(t),De(this))},ye.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),De(this))},ye.prototype.render=Oe,q=[],Gt=typeof Promise=="function"?Promise.prototype.then.bind(Promise.resolve()):setTimeout,je=function(e,t){return e.__v.__b-t.__v.__b},ke.__r=0,Ze=0,He=St(!1),ze=St(!0),Yt=0;var rn=function(e,t,n,r){var o;t[0]=0;for(var i=1;i<t.length;i++){var s=t[i++],a=t[i]?(t[0]|=s?1:2,n[t[i++]]):t[++i];s===3?r[0]=a:s===4?r[1]=Object.assign(r[1]||{},a):s===5?(r[1]=r[1]||{})[t[++i]]=a:s===6?r[1][t[++i]]+=a+"":s?(o=e.apply(a,rn(e,a,n,["",null])),r.push(o),a[0]?t[0]|=2:(t[i-2]=0,t[i]=o)):r.push(a)}return r},Et=new Map;function on(e){var t=Et.get(this);return t||(t=new Map,Et.set(this,t)),(t=rn(this,t.get(e)||(t.set(e,t=function(n){for(var r,o,i=1,s="",a="",c=[0],u=function(d){i===1&&(d||(s=s.replace(/^\s*\n\s*|\s*\n\s*$/g,"")))?c.push(0,d,s):i===3&&(d||s)?(c.push(3,d,s),i=2):i===2&&s==="..."&&d?c.push(4,d,0):i===2&&s&&!d?c.push(5,0,!0,s):i>=5&&((s||!d&&i===5)&&(c.push(i,0,s,o),i=6),d&&(c.push(i,d,0,o),i=6)),s=""},f=0;f<n.length;f++){f&&(i===1&&u(),u(f));for(var l=0;l<n[f].length;l++)r=n[f][l],i===1?r==="<"?(u(),c=[c],i=3):s+=r:i===4?s==="--"&&r===">"?(i=1,s=""):s=r+s[0]:a?r===a?a="":s+=r:r==='"'||r==="'"?a=r:r===">"?(u(),i=1):i&&(r==="="?(i=5,o=s,s=""):r==="/"&&(i<5||n[f][l+1]===">")?(u(),i===3&&(c=c[0]),i=c,(c=c[0]).push(2,0,i),i=0):r===" "||r==="	"||r===`
`||r==="\r"?(u(),i=2):s+=r),i===3&&s==="!--"&&(i=4,c=c[0])}return u(),c}(e)),t),arguments,[])).length>1?t:t[0]}var C=on.bind(Qt),re,w,Pe,$t,We=0,sn=[],S=x,Mt=S.__b,Ot=S.__r,Tt=S.diffed,At=S.__c,Ct=S.unmount,It=S.__;function rt(e,t){S.__h&&S.__h(w,e,We||t),We=0;var n=w.__H||(w.__H={__:[],__h:[]});return e>=n.__.length&&n.__.push({}),n.__[e]}function an(e){return We=1,ar(ln,e)}function ar(e,t,n){var r=rt(re++,2);if(r.t=e,!r.__c&&(r.__=[ln(void 0,t),function(a){var c=r.__N?r.__N[0]:r.__[0],u=r.t(c,a);c!==u&&(r.__N=[u,r.__[1]],r.__c.setState({}))}],r.__c=w,!w.u)){var o=function(a,c,u){if(!r.__c.__H)return!0;var f=r.__c.__H.__.filter(function(d){return!!d.__c});if(f.every(function(d){return!d.__N}))return!i||i.call(this,a,c,u);var l=!1;return f.forEach(function(d){if(d.__N){var h=d.__[0];d.__=d.__N,d.__N=void 0,h!==d.__[0]&&(l=!0)}}),!(!l&&r.__c.props===a)&&(!i||i.call(this,a,c,u))};w.u=!0;var i=w.shouldComponentUpdate,s=w.componentWillUpdate;w.componentWillUpdate=function(a,c,u){if(this.__e){var f=i;i=void 0,o(a,c,u),i=f}s&&s.call(this,a,c,u)},w.shouldComponentUpdate=o}return r.__N||r.__}function cn(e,t){var n=rt(re++,3);!S.__s&&ur(n.__H,t)&&(n.__=e,n.i=t,w.__H.__h.push(n))}function ot(e){var t=w.context[e.__c],n=rt(re++,9);return n.c=e,t?(n.__==null&&(n.__=!0,t.sub(w)),t.props.value):e.__}function cr(){for(var e;e=sn.shift();)if(e.__P&&e.__H)try{e.__H.__h.forEach(we),e.__H.__h.forEach(Ve),e.__H.__h=[]}catch(t){e.__H.__h=[],S.__e(t,e.__v)}}S.__b=function(e){w=null,Mt&&Mt(e)},S.__=function(e,t){e&&t.__k&&t.__k.__m&&(e.__m=t.__k.__m),It&&It(e,t)},S.__r=function(e){Ot&&Ot(e),re=0;var t=(w=e.__c).__H;t&&(Pe===w?(t.__h=[],w.__h=[],t.__.forEach(function(n){n.__N&&(n.__=n.__N),n.i=n.__N=void 0})):(t.__h.forEach(we),t.__h.forEach(Ve),t.__h=[],re=0)),Pe=w},S.diffed=function(e){Tt&&Tt(e);var t=e.__c;t&&t.__H&&(t.__H.__h.length&&(sn.push(t)!==1&&$t===S.requestAnimationFrame||(($t=S.requestAnimationFrame)||lr)(cr)),t.__H.__.forEach(function(n){n.i&&(n.__H=n.i),n.i=void 0})),Pe=w=null},S.__c=function(e,t){t.some(function(n){try{n.__h.forEach(we),n.__h=n.__h.filter(function(r){return!r.__||Ve(r)})}catch(r){t.some(function(o){o.__h&&(o.__h=[])}),t=[],S.__e(r,n.__v)}}),At&&At(e,t)},S.unmount=function(e){Ct&&Ct(e);var t,n=e.__c;n&&n.__H&&(n.__H.__.forEach(function(r){try{we(r)}catch(o){t=o}}),n.__H=void 0,t&&S.__e(t,n.__v))};var Pt=typeof requestAnimationFrame=="function";function lr(e){var t,n=function(){clearTimeout(r),Pt&&cancelAnimationFrame(t),setTimeout(e)},r=setTimeout(n,100);Pt&&(t=requestAnimationFrame(n))}function we(e){var t=w,n=e.__c;typeof n=="function"&&(e.__c=void 0,n()),w=t}function Ve(e){var t=w;e.__c=e.__(),w=t}function ur(e,t){return!e||e.length!==t.length||t.some(function(n,r){return n!==e[r]})}function ln(e,t){return typeof t=="function"?t(e):t}function un(){const e=new Date,t=e.getDate(),n=e.getMonth(),r=e.getFullYear();return t+"-"+n+"-"+r}const _e=2147483647,fr=16807;class hr{constructor(t){if(!Number.isInteger(t))throw new TypeError("Expected `seed` to be a `integer`");this._seed=t%_e,this._seed<=0&&(this._seed+=_e-1)}integer(){return this._seed*=fr,this._seed%=_e,this._seed}integerInRange(t,n){return Math.round(this.floatInRange(t,n))}float(){return(this.integer()-1)/(_e-1)}floatInRange(t,n){return t+(n-t)*this.float()}boolean(){return this.integer()%2===0}}const it={32:16777619n,64:1099511628211n,128:309485009821345068724781371n,256:374144419156711147060143317175368453031918731002211n,512:35835915874844867368919076489095108449946327955754392558399825615420669938882575126094039892345713852759n,1024:5016456510113118655434598811035278955030765345404790744303017523831112055108147451509157692220295382716162651878526895249385292291816524375083746691371804094271873160484737966720260389217684476157468082573n},fn={32:2166136261n,64:14695981039346656037n,128:144066263297769815596495629667062367629n,256:100029257958052580907070968620625704837092796014241193945225284501741471925557n,512:9659303129496669498009435400716310466090418745672637896108374329434462657994582932197716438449813051892206539805784495328239340083876191928701583869517785n,1024:14197795064947621068722070641403218320880622795441933960878474914617582723252296732303717722150864096521202355549365628174669108571814760471015076148029755969804077320157692458563003215304957150157403644460363550505412711285966361610267868082893823963790439336411086884584107735010676915n},hn=new globalThis.TextEncoder;function dr(e,t){const n=it[t];let r=fn[t];for(let o=0;o<e.length;o++)r^=BigInt(e[o]),r=BigInt.asUintN(t,r*n);return r}function pr(e,t,n){if(n.length===0)throw new Error("The `utf8Buffer` option must have a length greater than zero");const r=it[t];let o=fn[t],i=e;for(;i.length>0;){const s=hn.encodeInto(i,n);i=i.slice(s.read);for(let a=0;a<s.written;a++)o^=BigInt(n[a]),o=BigInt.asUintN(t,o*r)}return o}function _r(e,{size:t=32,utf8Buffer:n}={}){if(!it[t])throw new Error("The `size` option must be one of 32, 64, 128, 256, 512, or 1024");if(typeof e=="string"){if(n)return pr(e,t,n);e=hn.encode(e)}return dr(e,t)}function br(e){return Number(_r(e))}function dn(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function vr(e){if(e.__esModule)return e;var t=e.default;if(typeof t=="function"){var n=function r(){return this instanceof r?Reflect.construct(t,arguments,this.constructor):t.apply(this,arguments)};n.prototype=t.prototype}else n={};return Object.defineProperty(n,"__esModule",{value:!0}),Object.keys(e).forEach(function(r){var o=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(n,r,o.get?o:{enumerable:!0,get:function(){return e[r]}})}),n}var pn={exports:{}},_n={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},bn={exports:{}},gr=function(t){return!t||typeof t=="string"?!1:t instanceof Array||Array.isArray(t)||t.length>=0&&(t.splice instanceof Function||Object.getOwnPropertyDescriptor(t,t.length-1)&&t.constructor.name!=="String")},mr=gr,yr=Array.prototype.concat,wr=Array.prototype.slice,Ft=bn.exports=function(t){for(var n=[],r=0,o=t.length;r<o;r++){var i=t[r];mr(i)?n=yr.call(n,wr.call(i)):n.push(i)}return n};Ft.wrap=function(e){return function(){return e(Ft(arguments))}};var xr=bn.exports,te=_n,se=xr,vn=Object.hasOwnProperty,gn=Object.create(null);for(var Fe in te)vn.call(te,Fe)&&(gn[te[Fe]]=Fe);var T=pn.exports={to:{},get:{}};T.get=function(e){var t=e.substring(0,3).toLowerCase(),n,r;switch(t){case"hsl":n=T.get.hsl(e),r="hsl";break;case"hwb":n=T.get.hwb(e),r="hwb";break;default:n=T.get.rgb(e),r="rgb";break}return n?{model:r,value:n}:null};T.get.rgb=function(e){if(!e)return null;var t=/^#([a-f0-9]{3,4})$/i,n=/^#([a-f0-9]{6})([a-f0-9]{2})?$/i,r=/^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/,o=/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/,i=/^(\w+)$/,s=[0,0,0,1],a,c,u;if(a=e.match(n)){for(u=a[2],a=a[1],c=0;c<3;c++){var f=c*2;s[c]=parseInt(a.slice(f,f+2),16)}u&&(s[3]=parseInt(u,16)/255)}else if(a=e.match(t)){for(a=a[1],u=a[3],c=0;c<3;c++)s[c]=parseInt(a[c]+a[c],16);u&&(s[3]=parseInt(u+u,16)/255)}else if(a=e.match(r)){for(c=0;c<3;c++)s[c]=parseInt(a[c+1],0);a[4]&&(a[5]?s[3]=parseFloat(a[4])*.01:s[3]=parseFloat(a[4]))}else if(a=e.match(o)){for(c=0;c<3;c++)s[c]=Math.round(parseFloat(a[c+1])*2.55);a[4]&&(a[5]?s[3]=parseFloat(a[4])*.01:s[3]=parseFloat(a[4]))}else return(a=e.match(i))?a[1]==="transparent"?[0,0,0,0]:vn.call(te,a[1])?(s=te[a[1]],s[3]=1,s):null:null;for(c=0;c<3;c++)s[c]=j(s[c],0,255);return s[3]=j(s[3],0,1),s};T.get.hsl=function(e){if(!e)return null;var t=/^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/,n=e.match(t);if(n){var r=parseFloat(n[4]),o=(parseFloat(n[1])%360+360)%360,i=j(parseFloat(n[2]),0,100),s=j(parseFloat(n[3]),0,100),a=j(isNaN(r)?1:r,0,1);return[o,i,s,a]}return null};T.get.hwb=function(e){if(!e)return null;var t=/^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/,n=e.match(t);if(n){var r=parseFloat(n[4]),o=(parseFloat(n[1])%360+360)%360,i=j(parseFloat(n[2]),0,100),s=j(parseFloat(n[3]),0,100),a=j(isNaN(r)?1:r,0,1);return[o,i,s,a]}return null};T.to.hex=function(){var e=se(arguments);return"#"+be(e[0])+be(e[1])+be(e[2])+(e[3]<1?be(Math.round(e[3]*255)):"")};T.to.rgb=function(){var e=se(arguments);return e.length<4||e[3]===1?"rgb("+Math.round(e[0])+", "+Math.round(e[1])+", "+Math.round(e[2])+")":"rgba("+Math.round(e[0])+", "+Math.round(e[1])+", "+Math.round(e[2])+", "+e[3]+")"};T.to.rgb.percent=function(){var e=se(arguments),t=Math.round(e[0]/255*100),n=Math.round(e[1]/255*100),r=Math.round(e[2]/255*100);return e.length<4||e[3]===1?"rgb("+t+"%, "+n+"%, "+r+"%)":"rgba("+t+"%, "+n+"%, "+r+"%, "+e[3]+")"};T.to.hsl=function(){var e=se(arguments);return e.length<4||e[3]===1?"hsl("+e[0]+", "+e[1]+"%, "+e[2]+"%)":"hsla("+e[0]+", "+e[1]+"%, "+e[2]+"%, "+e[3]+")"};T.to.hwb=function(){var e=se(arguments),t="";return e.length>=4&&e[3]!==1&&(t=", "+e[3]),"hwb("+e[0]+", "+e[1]+"%, "+e[2]+"%"+t+")"};T.to.keyword=function(e){return gn[e.slice(0,3)]};function j(e,t,n){return Math.min(Math.max(t,e),n)}function be(e){var t=Math.round(e).toString(16).toUpperCase();return t.length<2?"0"+t:t}var kr=pn.exports;const oe=_n,mn={};for(const e of Object.keys(oe))mn[oe[e]]=e;const p={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};var yn=p;for(const e of Object.keys(p)){if(!("channels"in p[e]))throw new Error("missing channels property: "+e);if(!("labels"in p[e]))throw new Error("missing channel labels property: "+e);if(p[e].labels.length!==p[e].channels)throw new Error("channel and label counts mismatch: "+e);const{channels:t,labels:n}=p[e];delete p[e].channels,delete p[e].labels,Object.defineProperty(p[e],"channels",{value:t}),Object.defineProperty(p[e],"labels",{value:n})}p.rgb.hsl=function(e){const t=e[0]/255,n=e[1]/255,r=e[2]/255,o=Math.min(t,n,r),i=Math.max(t,n,r),s=i-o;let a,c;i===o?a=0:t===i?a=(n-r)/s:n===i?a=2+(r-t)/s:r===i&&(a=4+(t-n)/s),a=Math.min(a*60,360),a<0&&(a+=360);const u=(o+i)/2;return i===o?c=0:u<=.5?c=s/(i+o):c=s/(2-i-o),[a,c*100,u*100]};p.rgb.hsv=function(e){let t,n,r,o,i;const s=e[0]/255,a=e[1]/255,c=e[2]/255,u=Math.max(s,a,c),f=u-Math.min(s,a,c),l=function(d){return(u-d)/6/f+1/2};return f===0?(o=0,i=0):(i=f/u,t=l(s),n=l(a),r=l(c),s===u?o=r-n:a===u?o=1/3+t-r:c===u&&(o=2/3+n-t),o<0?o+=1:o>1&&(o-=1)),[o*360,i*100,u*100]};p.rgb.hwb=function(e){const t=e[0],n=e[1];let r=e[2];const o=p.rgb.hsl(e)[0],i=1/255*Math.min(t,Math.min(n,r));return r=1-1/255*Math.max(t,Math.max(n,r)),[o,i*100,r*100]};p.rgb.cmyk=function(e){const t=e[0]/255,n=e[1]/255,r=e[2]/255,o=Math.min(1-t,1-n,1-r),i=(1-t-o)/(1-o)||0,s=(1-n-o)/(1-o)||0,a=(1-r-o)/(1-o)||0;return[i*100,s*100,a*100,o*100]};function Sr(e,t){return(e[0]-t[0])**2+(e[1]-t[1])**2+(e[2]-t[2])**2}p.rgb.keyword=function(e){const t=mn[e];if(t)return t;let n=1/0,r;for(const o of Object.keys(oe)){const i=oe[o],s=Sr(e,i);s<n&&(n=s,r=o)}return r};p.keyword.rgb=function(e){return oe[e]};p.rgb.xyz=function(e){let t=e[0]/255,n=e[1]/255,r=e[2]/255;t=t>.04045?((t+.055)/1.055)**2.4:t/12.92,n=n>.04045?((n+.055)/1.055)**2.4:n/12.92,r=r>.04045?((r+.055)/1.055)**2.4:r/12.92;const o=t*.4124+n*.3576+r*.1805,i=t*.2126+n*.7152+r*.0722,s=t*.0193+n*.1192+r*.9505;return[o*100,i*100,s*100]};p.rgb.lab=function(e){const t=p.rgb.xyz(e);let n=t[0],r=t[1],o=t[2];n/=95.047,r/=100,o/=108.883,n=n>.008856?n**(1/3):7.787*n+16/116,r=r>.008856?r**(1/3):7.787*r+16/116,o=o>.008856?o**(1/3):7.787*o+16/116;const i=116*r-16,s=500*(n-r),a=200*(r-o);return[i,s,a]};p.hsl.rgb=function(e){const t=e[0]/360,n=e[1]/100,r=e[2]/100;let o,i,s;if(n===0)return s=r*255,[s,s,s];r<.5?o=r*(1+n):o=r+n-r*n;const a=2*r-o,c=[0,0,0];for(let u=0;u<3;u++)i=t+1/3*-(u-1),i<0&&i++,i>1&&i--,6*i<1?s=a+(o-a)*6*i:2*i<1?s=o:3*i<2?s=a+(o-a)*(2/3-i)*6:s=a,c[u]=s*255;return c};p.hsl.hsv=function(e){const t=e[0];let n=e[1]/100,r=e[2]/100,o=n;const i=Math.max(r,.01);r*=2,n*=r<=1?r:2-r,o*=i<=1?i:2-i;const s=(r+n)/2,a=r===0?2*o/(i+o):2*n/(r+n);return[t,a*100,s*100]};p.hsv.rgb=function(e){const t=e[0]/60,n=e[1]/100;let r=e[2]/100;const o=Math.floor(t)%6,i=t-Math.floor(t),s=255*r*(1-n),a=255*r*(1-n*i),c=255*r*(1-n*(1-i));switch(r*=255,o){case 0:return[r,c,s];case 1:return[a,r,s];case 2:return[s,r,c];case 3:return[s,a,r];case 4:return[c,s,r];case 5:return[r,s,a]}};p.hsv.hsl=function(e){const t=e[0],n=e[1]/100,r=e[2]/100,o=Math.max(r,.01);let i,s;s=(2-n)*r;const a=(2-n)*o;return i=n*o,i/=a<=1?a:2-a,i=i||0,s/=2,[t,i*100,s*100]};p.hwb.rgb=function(e){const t=e[0]/360;let n=e[1]/100,r=e[2]/100;const o=n+r;let i;o>1&&(n/=o,r/=o);const s=Math.floor(6*t),a=1-r;i=6*t-s,s&1&&(i=1-i);const c=n+i*(a-n);let u,f,l;switch(s){default:case 6:case 0:u=a,f=c,l=n;break;case 1:u=c,f=a,l=n;break;case 2:u=n,f=a,l=c;break;case 3:u=n,f=c,l=a;break;case 4:u=c,f=n,l=a;break;case 5:u=a,f=n,l=c;break}return[u*255,f*255,l*255]};p.cmyk.rgb=function(e){const t=e[0]/100,n=e[1]/100,r=e[2]/100,o=e[3]/100,i=1-Math.min(1,t*(1-o)+o),s=1-Math.min(1,n*(1-o)+o),a=1-Math.min(1,r*(1-o)+o);return[i*255,s*255,a*255]};p.xyz.rgb=function(e){const t=e[0]/100,n=e[1]/100,r=e[2]/100;let o,i,s;return o=t*3.2406+n*-1.5372+r*-.4986,i=t*-.9689+n*1.8758+r*.0415,s=t*.0557+n*-.204+r*1.057,o=o>.0031308?1.055*o**(1/2.4)-.055:o*12.92,i=i>.0031308?1.055*i**(1/2.4)-.055:i*12.92,s=s>.0031308?1.055*s**(1/2.4)-.055:s*12.92,o=Math.min(Math.max(0,o),1),i=Math.min(Math.max(0,i),1),s=Math.min(Math.max(0,s),1),[o*255,i*255,s*255]};p.xyz.lab=function(e){let t=e[0],n=e[1],r=e[2];t/=95.047,n/=100,r/=108.883,t=t>.008856?t**(1/3):7.787*t+16/116,n=n>.008856?n**(1/3):7.787*n+16/116,r=r>.008856?r**(1/3):7.787*r+16/116;const o=116*n-16,i=500*(t-n),s=200*(n-r);return[o,i,s]};p.lab.xyz=function(e){const t=e[0],n=e[1],r=e[2];let o,i,s;i=(t+16)/116,o=n/500+i,s=i-r/200;const a=i**3,c=o**3,u=s**3;return i=a>.008856?a:(i-16/116)/7.787,o=c>.008856?c:(o-16/116)/7.787,s=u>.008856?u:(s-16/116)/7.787,o*=95.047,i*=100,s*=108.883,[o,i,s]};p.lab.lch=function(e){const t=e[0],n=e[1],r=e[2];let o;o=Math.atan2(r,n)*360/2/Math.PI,o<0&&(o+=360);const s=Math.sqrt(n*n+r*r);return[t,s,o]};p.lch.lab=function(e){const t=e[0],n=e[1],o=e[2]/360*2*Math.PI,i=n*Math.cos(o),s=n*Math.sin(o);return[t,i,s]};p.rgb.ansi16=function(e,t=null){const[n,r,o]=e;let i=t===null?p.rgb.hsv(e)[2]:t;if(i=Math.round(i/50),i===0)return 30;let s=30+(Math.round(o/255)<<2|Math.round(r/255)<<1|Math.round(n/255));return i===2&&(s+=60),s};p.hsv.ansi16=function(e){return p.rgb.ansi16(p.hsv.rgb(e),e[2])};p.rgb.ansi256=function(e){const t=e[0],n=e[1],r=e[2];return t===n&&n===r?t<8?16:t>248?231:Math.round((t-8)/247*24)+232:16+36*Math.round(t/255*5)+6*Math.round(n/255*5)+Math.round(r/255*5)};p.ansi16.rgb=function(e){let t=e%10;if(t===0||t===7)return e>50&&(t+=3.5),t=t/10.5*255,[t,t,t];const n=(~~(e>50)+1)*.5,r=(t&1)*n*255,o=(t>>1&1)*n*255,i=(t>>2&1)*n*255;return[r,o,i]};p.ansi256.rgb=function(e){if(e>=232){const i=(e-232)*10+8;return[i,i,i]}e-=16;let t;const n=Math.floor(e/36)/5*255,r=Math.floor((t=e%36)/6)/5*255,o=t%6/5*255;return[n,r,o]};p.rgb.hex=function(e){const n=(((Math.round(e[0])&255)<<16)+((Math.round(e[1])&255)<<8)+(Math.round(e[2])&255)).toString(16).toUpperCase();return"000000".substring(n.length)+n};p.hex.rgb=function(e){const t=e.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!t)return[0,0,0];let n=t[0];t[0].length===3&&(n=n.split("").map(a=>a+a).join(""));const r=parseInt(n,16),o=r>>16&255,i=r>>8&255,s=r&255;return[o,i,s]};p.rgb.hcg=function(e){const t=e[0]/255,n=e[1]/255,r=e[2]/255,o=Math.max(Math.max(t,n),r),i=Math.min(Math.min(t,n),r),s=o-i;let a,c;return s<1?a=i/(1-s):a=0,s<=0?c=0:o===t?c=(n-r)/s%6:o===n?c=2+(r-t)/s:c=4+(t-n)/s,c/=6,c%=1,[c*360,s*100,a*100]};p.hsl.hcg=function(e){const t=e[1]/100,n=e[2]/100,r=n<.5?2*t*n:2*t*(1-n);let o=0;return r<1&&(o=(n-.5*r)/(1-r)),[e[0],r*100,o*100]};p.hsv.hcg=function(e){const t=e[1]/100,n=e[2]/100,r=t*n;let o=0;return r<1&&(o=(n-r)/(1-r)),[e[0],r*100,o*100]};p.hcg.rgb=function(e){const t=e[0]/360,n=e[1]/100,r=e[2]/100;if(n===0)return[r*255,r*255,r*255];const o=[0,0,0],i=t%1*6,s=i%1,a=1-s;let c=0;switch(Math.floor(i)){case 0:o[0]=1,o[1]=s,o[2]=0;break;case 1:o[0]=a,o[1]=1,o[2]=0;break;case 2:o[0]=0,o[1]=1,o[2]=s;break;case 3:o[0]=0,o[1]=a,o[2]=1;break;case 4:o[0]=s,o[1]=0,o[2]=1;break;default:o[0]=1,o[1]=0,o[2]=a}return c=(1-n)*r,[(n*o[0]+c)*255,(n*o[1]+c)*255,(n*o[2]+c)*255]};p.hcg.hsv=function(e){const t=e[1]/100,n=e[2]/100,r=t+n*(1-t);let o=0;return r>0&&(o=t/r),[e[0],o*100,r*100]};p.hcg.hsl=function(e){const t=e[1]/100,r=e[2]/100*(1-t)+.5*t;let o=0;return r>0&&r<.5?o=t/(2*r):r>=.5&&r<1&&(o=t/(2*(1-r))),[e[0],o*100,r*100]};p.hcg.hwb=function(e){const t=e[1]/100,n=e[2]/100,r=t+n*(1-t);return[e[0],(r-t)*100,(1-r)*100]};p.hwb.hcg=function(e){const t=e[1]/100,r=1-e[2]/100,o=r-t;let i=0;return o<1&&(i=(r-o)/(1-o)),[e[0],o*100,i*100]};p.apple.rgb=function(e){return[e[0]/65535*255,e[1]/65535*255,e[2]/65535*255]};p.rgb.apple=function(e){return[e[0]/255*65535,e[1]/255*65535,e[2]/255*65535]};p.gray.rgb=function(e){return[e[0]/100*255,e[0]/100*255,e[0]/100*255]};p.gray.hsl=function(e){return[0,0,e[0]]};p.gray.hsv=p.gray.hsl;p.gray.hwb=function(e){return[0,100,e[0]]};p.gray.cmyk=function(e){return[0,0,0,e[0]]};p.gray.lab=function(e){return[e[0],0,0]};p.gray.hex=function(e){const t=Math.round(e[0]/100*255)&255,r=((t<<16)+(t<<8)+t).toString(16).toUpperCase();return"000000".substring(r.length)+r};p.rgb.gray=function(e){return[(e[0]+e[1]+e[2])/3/255*100]};const Se=yn;function Er(){const e={},t=Object.keys(Se);for(let n=t.length,r=0;r<n;r++)e[t[r]]={distance:-1,parent:null};return e}function $r(e){const t=Er(),n=[e];for(t[e].distance=0;n.length;){const r=n.pop(),o=Object.keys(Se[r]);for(let i=o.length,s=0;s<i;s++){const a=o[s],c=t[a];c.distance===-1&&(c.distance=t[r].distance+1,c.parent=r,n.unshift(a))}}return t}function Mr(e,t){return function(n){return t(e(n))}}function Or(e,t){const n=[t[e].parent,e];let r=Se[t[e].parent][e],o=t[e].parent;for(;t[o].parent;)n.unshift(t[o].parent),r=Mr(Se[t[o].parent][o],r),o=t[o].parent;return r.conversion=n,r}var Tr=function(e){const t=$r(e),n={},r=Object.keys(t);for(let o=r.length,i=0;i<o;i++){const s=r[i];t[s].parent!==null&&(n[s]=Or(s,t))}return n};const Be=yn,Ar=Tr,J={},Cr=Object.keys(Be);function Ir(e){const t=function(...n){const r=n[0];return r==null?r:(r.length>1&&(n=r),e(n))};return"conversion"in e&&(t.conversion=e.conversion),t}function Pr(e){const t=function(...n){const r=n[0];if(r==null)return r;r.length>1&&(n=r);const o=e(n);if(typeof o=="object")for(let i=o.length,s=0;s<i;s++)o[s]=Math.round(o[s]);return o};return"conversion"in e&&(t.conversion=e.conversion),t}Cr.forEach(e=>{J[e]={},Object.defineProperty(J[e],"channels",{value:Be[e].channels}),Object.defineProperty(J[e],"labels",{value:Be[e].labels});const t=Ar(e);Object.keys(t).forEach(r=>{const o=t[r];J[e][r]=Pr(o),J[e][r].raw=Ir(o)})});var Fr=J;const G=kr,O=Fr,wn=["keyword","gray","hex"],Je={};for(const e of Object.keys(O))Je[[...O[e].labels].sort().join("")]=e;const Ee={};function $(e,t){if(!(this instanceof $))return new $(e,t);if(t&&t in wn&&(t=null),t&&!(t in O))throw new Error("Unknown model: "+t);let n,r;if(e==null)this.model="rgb",this.color=[0,0,0],this.valpha=1;else if(e instanceof $)this.model=e.model,this.color=[...e.color],this.valpha=e.valpha;else if(typeof e=="string"){const o=G.get(e);if(o===null)throw new Error("Unable to parse color from string: "+e);this.model=o.model,r=O[this.model].channels,this.color=o.value.slice(0,r),this.valpha=typeof o.value[r]=="number"?o.value[r]:1}else if(e.length>0){this.model=t||"rgb",r=O[this.model].channels;const o=Array.prototype.slice.call(e,0,r);this.color=Ge(o,r),this.valpha=typeof e[r]=="number"?e[r]:1}else if(typeof e=="number")this.model="rgb",this.color=[e>>16&255,e>>8&255,e&255],this.valpha=1;else{this.valpha=1;const o=Object.keys(e);"alpha"in e&&(o.splice(o.indexOf("alpha"),1),this.valpha=typeof e.alpha=="number"?e.alpha:0);const i=o.sort().join("");if(!(i in Je))throw new Error("Unable to parse color from object: "+JSON.stringify(e));this.model=Je[i];const{labels:s}=O[this.model],a=[];for(n=0;n<s.length;n++)a.push(e[s[n]]);this.color=Ge(a)}if(Ee[this.model])for(r=O[this.model].channels,n=0;n<r;n++){const o=Ee[this.model][n];o&&(this.color[n]=o(this.color[n]))}this.valpha=Math.max(0,Math.min(1,this.valpha)),Object.freeze&&Object.freeze(this)}$.prototype={toString(){return this.string()},toJSON(){return this[this.model]()},string(e){let t=this.model in G.to?this:this.rgb();t=t.round(typeof e=="number"?e:1);const n=t.valpha===1?t.color:[...t.color,this.valpha];return G.to[t.model](n)},percentString(e){const t=this.rgb().round(typeof e=="number"?e:1),n=t.valpha===1?t.color:[...t.color,this.valpha];return G.to.rgb.percent(n)},array(){return this.valpha===1?[...this.color]:[...this.color,this.valpha]},object(){const e={},{channels:t}=O[this.model],{labels:n}=O[this.model];for(let r=0;r<t;r++)e[n[r]]=this.color[r];return this.valpha!==1&&(e.alpha=this.valpha),e},unitArray(){const e=this.rgb().color;return e[0]/=255,e[1]/=255,e[2]/=255,this.valpha!==1&&e.push(this.valpha),e},unitObject(){const e=this.rgb().object();return e.r/=255,e.g/=255,e.b/=255,this.valpha!==1&&(e.alpha=this.valpha),e},round(e){return e=Math.max(e||0,0),new $([...this.color.map(Lr(e)),this.valpha],this.model)},alpha(e){return e!==void 0?new $([...this.color,Math.max(0,Math.min(1,e))],this.model):this.valpha},red:k("rgb",0,E(255)),green:k("rgb",1,E(255)),blue:k("rgb",2,E(255)),hue:k(["hsl","hsv","hsl","hwb","hcg"],0,e=>(e%360+360)%360),saturationl:k("hsl",1,E(100)),lightness:k("hsl",2,E(100)),saturationv:k("hsv",1,E(100)),value:k("hsv",2,E(100)),chroma:k("hcg",1,E(100)),gray:k("hcg",2,E(100)),white:k("hwb",1,E(100)),wblack:k("hwb",2,E(100)),cyan:k("cmyk",0,E(100)),magenta:k("cmyk",1,E(100)),yellow:k("cmyk",2,E(100)),black:k("cmyk",3,E(100)),x:k("xyz",0,E(95.047)),y:k("xyz",1,E(100)),z:k("xyz",2,E(108.833)),l:k("lab",0,E(100)),a:k("lab",1),b:k("lab",2),keyword(e){return e!==void 0?new $(e):O[this.model].keyword(this.color)},hex(e){return e!==void 0?new $(e):G.to.hex(this.rgb().round().color)},hexa(e){if(e!==void 0)return new $(e);const t=this.rgb().round().color;let n=Math.round(this.valpha*255).toString(16).toUpperCase();return n.length===1&&(n="0"+n),G.to.hex(t)+n},rgbNumber(){const e=this.rgb().color;return(e[0]&255)<<16|(e[1]&255)<<8|e[2]&255},luminosity(){const e=this.rgb().color,t=[];for(const[n,r]of e.entries()){const o=r/255;t[n]=o<=.04045?o/12.92:((o+.055)/1.055)**2.4}return .2126*t[0]+.7152*t[1]+.0722*t[2]},contrast(e){const t=this.luminosity(),n=e.luminosity();return t>n?(t+.05)/(n+.05):(n+.05)/(t+.05)},level(e){const t=this.contrast(e);return t>=7?"AAA":t>=4.5?"AA":""},isDark(){const e=this.rgb().color;return(e[0]*2126+e[1]*7152+e[2]*722)/1e4<128},isLight(){return!this.isDark()},negate(){const e=this.rgb();for(let t=0;t<3;t++)e.color[t]=255-e.color[t];return e},lighten(e){const t=this.hsl();return t.color[2]+=t.color[2]*e,t},darken(e){const t=this.hsl();return t.color[2]-=t.color[2]*e,t},saturate(e){const t=this.hsl();return t.color[1]+=t.color[1]*e,t},desaturate(e){const t=this.hsl();return t.color[1]-=t.color[1]*e,t},whiten(e){const t=this.hwb();return t.color[1]+=t.color[1]*e,t},blacken(e){const t=this.hwb();return t.color[2]+=t.color[2]*e,t},grayscale(){const e=this.rgb().color,t=e[0]*.3+e[1]*.59+e[2]*.11;return $.rgb(t,t,t)},fade(e){return this.alpha(this.valpha-this.valpha*e)},opaquer(e){return this.alpha(this.valpha+this.valpha*e)},rotate(e){const t=this.hsl();let n=t.color[0];return n=(n+e)%360,n=n<0?360+n:n,t.color[0]=n,t},mix(e,t){if(!e||!e.rgb)throw new Error('Argument to "mix" was not a Color instance, but rather an instance of '+typeof e);const n=e.rgb(),r=this.rgb(),o=t===void 0?.5:t,i=2*o-1,s=n.alpha()-r.alpha(),a=((i*s===-1?i:(i+s)/(1+i*s))+1)/2,c=1-a;return $.rgb(a*n.red()+c*r.red(),a*n.green()+c*r.green(),a*n.blue()+c*r.blue(),n.alpha()*o+r.alpha()*(1-o))}};for(const e of Object.keys(O)){if(wn.includes(e))continue;const{channels:t}=O[e];$.prototype[e]=function(...n){return this.model===e?new $(this):n.length>0?new $(n,e):new $([...Nr(O[this.model][e].raw(this.color)),this.valpha],e)},$[e]=function(...n){let r=n[0];return typeof r=="number"&&(r=Ge(n,t)),new $(r,e)}}function Rr(e,t){return Number(e.toFixed(t))}function Lr(e){return function(t){return Rr(t,e)}}function k(e,t,n){e=Array.isArray(e)?e:[e];for(const r of e)(Ee[r]||(Ee[r]=[]))[t]=n;return e=e[0],function(r){let o;return r!==void 0?(n&&(r=n(r)),o=this[e](),o.color[t]=r,o):(o=this[e]().color[t],n&&(o=n(o)),o)}}function E(e){return function(t){return Math.max(0,Math.min(e,t))}}function Nr(e){return Array.isArray(e)?e:[e]}function Ge(e,t){for(let n=0;n<t;n++)typeof e[n]!="number"&&(e[n]=0);return e}var Ur=$;const jr=dn(Ur),Hr=2147483647,zr=.618033988749895;var F;class xn{constructor({seed:t}){yt(this,F);if(typeof t=="string"&&(t=br(t)),!Number.isInteger(t))throw new TypeError("Expected `seed` to be a `integer`");wt(this,F,new hr(t))}static seed(){return Math.floor(Math.random()*Hr)}integer(){return B(this,F).integer()}integerInRange(t,n){return B(this,F).integerInRange(t,n)}float(){return B(this,F).float()}floatInRange(t,n){return B(this,F).floatInRange(t,n)}boolean(){return B(this,F).boolean()}arrayItem(t){return t[Math.floor(this.float()*t.length)]}date(){return new Date(Date.now()*this.float())}dateInRange(t,n){return new Date(this.integerInRange(t.getTime(),n.getTime()))}color(t=.5){let n=this.float();return n+=zr,n%=1,jr({h:n*360,s:t*100,v:95})}}F=new WeakMap;const Dr=un();new xn({seed:Dr});const qr=un(),Wr=new xn({seed:qr});function Vr(e,t){return Wr.integerInRange(e,t-1)}function Br(e){return[...e].sort(()=>Vr(0,2)-.5)}var kn=(e=>(e.Deciphraze="deciphraze",e.Cheminot="cheminot",e.Tetromino="tetromino",e.Shufflet="shufflet",e.Unsplit="unsplit",e.Unlock="unlock",e.Guirlande="guirlande",e.Reliade="reliade",e.Vault="vault",e))(kn||{});let ve=null;function st(){if(ve)return ve;const[e,t,n]=Br(Object.values(kn));return ve=[e,t,n],ve}const Rt=[];function Jr(e){const t=`/${e}`,n=window.open(t,e,["width=800","height=800","menubar=no","toolbar=no","location=no","status=no","resizable=yes","scrollbars=yes"].join(","));n&&Rt.push(n),window.onunload=()=>{for(const r of Rt)r.close()}}var Ye=function(e,t){return Ye=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,r){n.__proto__=r}||function(n,r){for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(n[o]=r[o])},Ye(e,t)};function ae(e,t){if(typeof t!="function"&&t!==null)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");Ye(e,t);function n(){this.constructor=e}e.prototype=t===null?Object.create(t):(n.prototype=t.prototype,new n)}function Gr(e,t,n,r){function o(i){return i instanceof n?i:new n(function(s){s(i)})}return new(n||(n=Promise))(function(i,s){function a(f){try{u(r.next(f))}catch(l){s(l)}}function c(f){try{u(r.throw(f))}catch(l){s(l)}}function u(f){f.done?i(f.value):o(f.value).then(a,c)}u((r=r.apply(e,t||[])).next())})}function Sn(e,t){var n={label:0,sent:function(){if(i[0]&1)throw i[1];return i[1]},trys:[],ops:[]},r,o,i,s;return s={next:a(0),throw:a(1),return:a(2)},typeof Symbol=="function"&&(s[Symbol.iterator]=function(){return this}),s;function a(u){return function(f){return c([u,f])}}function c(u){if(r)throw new TypeError("Generator is already executing.");for(;s&&(s=0,u[0]&&(n=0)),n;)try{if(r=1,o&&(i=u[0]&2?o.return:u[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,u[1])).done)return i;switch(o=0,i&&(u=[u[0]&2,i.value]),u[0]){case 0:case 1:i=u;break;case 4:return n.label++,{value:u[1],done:!1};case 5:n.label++,o=u[1],u=[0];continue;case 7:u=n.ops.pop(),n.trys.pop();continue;default:if(i=n.trys,!(i=i.length>0&&i[i.length-1])&&(u[0]===6||u[0]===2)){n=0;continue}if(u[0]===3&&(!i||u[1]>i[0]&&u[1]<i[3])){n.label=u[1];break}if(u[0]===6&&n.label<i[1]){n.label=i[1],i=u;break}if(i&&n.label<i[2]){n.label=i[2],n.ops.push(u);break}i[2]&&n.ops.pop(),n.trys.pop();continue}u=t.call(e,n)}catch(f){u=[6,f],o=0}finally{r=i=0}if(u[0]&5)throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}}function K(e){var t=typeof Symbol=="function"&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&typeof e.length=="number")return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function ie(e,t){var n=typeof Symbol=="function"&&e[Symbol.iterator];if(!n)return e;var r=n.call(e),o,i=[],s;try{for(;(t===void 0||t-- >0)&&!(o=r.next()).done;)i.push(o.value)}catch(a){s={error:a}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(s)throw s.error}}return i}function $e(e,t,n){if(n||arguments.length===2)for(var r=0,o=t.length,i;r<o;r++)(i||!(r in t))&&(i||(i=Array.prototype.slice.call(t,0,r)),i[r]=t[r]);return e.concat(i||Array.prototype.slice.call(t))}function Y(e){return this instanceof Y?(this.v=e,this):new Y(e)}function Yr(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r=n.apply(e,t||[]),o,i=[];return o={},a("next"),a("throw"),a("return",s),o[Symbol.asyncIterator]=function(){return this},o;function s(h){return function(_){return Promise.resolve(_).then(h,l)}}function a(h,_){r[h]&&(o[h]=function(b){return new Promise(function(g,v){i.push([h,b,g,v])>1||c(h,b)})},_&&(o[h]=_(o[h])))}function c(h,_){try{u(r[h](_))}catch(b){d(i[0][3],b)}}function u(h){h.value instanceof Y?Promise.resolve(h.value.v).then(f,l):d(i[0][2],h)}function f(h){c("next",h)}function l(h){c("throw",h)}function d(h,_){h(_),i.shift(),i.length&&c(i[0][0],i[0][1])}}function Kr(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t=e[Symbol.asyncIterator],n;return t?t.call(e):(e=typeof K=="function"?K(e):e[Symbol.iterator](),n={},r("next"),r("throw"),r("return"),n[Symbol.asyncIterator]=function(){return this},n);function r(i){n[i]=e[i]&&function(s){return new Promise(function(a,c){s=e[i](s),o(a,c,s.done,s.value)})}}function o(i,s,a,c){Promise.resolve(c).then(function(u){i({value:u,done:a})},s)}}function m(e){return typeof e=="function"}function at(e){var t=function(r){Error.call(r),r.stack=new Error().stack},n=e(t);return n.prototype=Object.create(Error.prototype),n.prototype.constructor=n,n}var Re=at(function(e){return function(n){e(this),this.message=n?n.length+` errors occurred during unsubscription:
`+n.map(function(r,o){return o+1+") "+r.toString()}).join(`
  `):"",this.name="UnsubscriptionError",this.errors=n}});function Ke(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var Te=function(){function e(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}return e.prototype.unsubscribe=function(){var t,n,r,o,i;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var a=K(s),c=a.next();!c.done;c=a.next()){var u=c.value;u.remove(this)}}catch(b){t={error:b}}finally{try{c&&!c.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}else s.remove(this);var f=this.initialTeardown;if(m(f))try{f()}catch(b){i=b instanceof Re?b.errors:[b]}var l=this._finalizers;if(l){this._finalizers=null;try{for(var d=K(l),h=d.next();!h.done;h=d.next()){var _=h.value;try{Lt(_)}catch(b){i=i??[],b instanceof Re?i=$e($e([],ie(i)),ie(b.errors)):i.push(b)}}}catch(b){r={error:b}}finally{try{h&&!h.done&&(o=d.return)&&o.call(d)}finally{if(r)throw r.error}}}if(i)throw new Re(i)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)Lt(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=(n=this._finalizers)!==null&&n!==void 0?n:[]).push(t)}},e.prototype._hasParent=function(t){var n=this._parentage;return n===t||Array.isArray(n)&&n.includes(t)},e.prototype._addParent=function(t){var n=this._parentage;this._parentage=Array.isArray(n)?(n.push(t),n):n?[n,t]:t},e.prototype._removeParent=function(t){var n=this._parentage;n===t?this._parentage=null:Array.isArray(n)&&Ke(n,t)},e.prototype.remove=function(t){var n=this._finalizers;n&&Ke(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=function(){var t=new e;return t.closed=!0,t}(),e}(),En=Te.EMPTY;function $n(e){return e instanceof Te||e&&"closed"in e&&m(e.remove)&&m(e.add)&&m(e.unsubscribe)}function Lt(e){m(e)?e():e.unsubscribe()}var Mn={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},On={setTimeout:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];return setTimeout.apply(void 0,$e([e,t],ie(n)))},clearTimeout:function(e){var t=On.delegate;return((t==null?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function Tn(e){On.setTimeout(function(){throw e})}function Nt(){}function xe(e){e()}var ct=function(e){ae(t,e);function t(n){var r=e.call(this)||this;return r.isStopped=!1,n?(r.destination=n,$n(n)&&n.add(r)):r.destination=eo,r}return t.create=function(n,r,o){return new Xe(n,r,o)},t.prototype.next=function(n){this.isStopped||this._next(n)},t.prototype.error=function(n){this.isStopped||(this.isStopped=!0,this._error(n))},t.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(n){this.destination.next(n)},t.prototype._error=function(n){try{this.destination.error(n)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(Te),Xr=Function.prototype.bind;function Le(e,t){return Xr.call(e,t)}var Qr=function(){function e(t){this.partialObserver=t}return e.prototype.next=function(t){var n=this.partialObserver;if(n.next)try{n.next(t)}catch(r){ge(r)}},e.prototype.error=function(t){var n=this.partialObserver;if(n.error)try{n.error(t)}catch(r){ge(r)}else ge(t)},e.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(n){ge(n)}},e}(),Xe=function(e){ae(t,e);function t(n,r,o){var i=e.call(this)||this,s;if(m(n)||!n)s={next:n??void 0,error:r??void 0,complete:o??void 0};else{var a;i&&Mn.useDeprecatedNextContext?(a=Object.create(n),a.unsubscribe=function(){return i.unsubscribe()},s={next:n.next&&Le(n.next,a),error:n.error&&Le(n.error,a),complete:n.complete&&Le(n.complete,a)}):s=n}return i.destination=new Qr(s),i}return t}(ct);function ge(e){Tn(e)}function Zr(e){throw e}var eo={closed:!0,next:Nt,error:Zr,complete:Nt},lt=function(){return typeof Symbol=="function"&&Symbol.observable||"@@observable"}();function ce(e){return e}function to(e){return e.length===0?ce:e.length===1?e[0]:function(n){return e.reduce(function(r,o){return o(r)},n)}}var M=function(){function e(t){t&&(this._subscribe=t)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(t,n,r){var o=this,i=ro(t)?t:new Xe(t,n,r);return xe(function(){var s=o,a=s.operator,c=s.source;i.add(a?a.call(i,c):c?o._subscribe(i):o._trySubscribe(i))}),i},e.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){t.error(n)}},e.prototype.forEach=function(t,n){var r=this;return n=Ut(n),new n(function(o,i){var s=new Xe({next:function(a){try{t(a)}catch(c){i(c),s.unsubscribe()}},error:i,complete:o});r.subscribe(s)})},e.prototype._subscribe=function(t){var n;return(n=this.source)===null||n===void 0?void 0:n.subscribe(t)},e.prototype[lt]=function(){return this},e.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return to(t)(this)},e.prototype.toPromise=function(t){var n=this;return t=Ut(t),new t(function(r,o){var i;n.subscribe(function(s){return i=s},function(s){return o(s)},function(){return r(i)})})},e.create=function(t){return new e(t)},e}();function Ut(e){var t;return(t=e??Mn.Promise)!==null&&t!==void 0?t:Promise}function no(e){return e&&m(e.next)&&m(e.error)&&m(e.complete)}function ro(e){return e&&e instanceof ct||no(e)&&$n(e)}function oo(e){return m(e==null?void 0:e.lift)}function D(e){return function(t){if(oo(t))return t.lift(function(n){try{return e(n,this)}catch(r){this.error(r)}});throw new TypeError("Unable to lift unknown Observable type")}}function R(e,t,n,r,o){return new io(e,t,n,r,o)}var io=function(e){ae(t,e);function t(n,r,o,i,s,a){var c=e.call(this,n)||this;return c.onFinalize=s,c.shouldUnsubscribe=a,c._next=r?function(u){try{r(u)}catch(f){n.error(f)}}:e.prototype._next,c._error=i?function(u){try{i(u)}catch(f){n.error(f)}finally{this.unsubscribe()}}:e.prototype._error,c._complete=o?function(){try{o()}catch(u){n.error(u)}finally{this.unsubscribe()}}:e.prototype._complete,c}return t.prototype.unsubscribe=function(){var n;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var r=this.closed;e.prototype.unsubscribe.call(this),!r&&((n=this.onFinalize)===null||n===void 0||n.call(this))}},t}(ct),so=at(function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}}),ut=function(e){ae(t,e);function t(){var n=e.call(this)||this;return n.closed=!1,n.currentObservers=null,n.observers=[],n.isStopped=!1,n.hasError=!1,n.thrownError=null,n}return t.prototype.lift=function(n){var r=new jt(this,this);return r.operator=n,r},t.prototype._throwIfClosed=function(){if(this.closed)throw new so},t.prototype.next=function(n){var r=this;xe(function(){var o,i;if(r._throwIfClosed(),!r.isStopped){r.currentObservers||(r.currentObservers=Array.from(r.observers));try{for(var s=K(r.currentObservers),a=s.next();!a.done;a=s.next()){var c=a.value;c.next(n)}}catch(u){o={error:u}}finally{try{a&&!a.done&&(i=s.return)&&i.call(s)}finally{if(o)throw o.error}}}})},t.prototype.error=function(n){var r=this;xe(function(){if(r._throwIfClosed(),!r.isStopped){r.hasError=r.isStopped=!0,r.thrownError=n;for(var o=r.observers;o.length;)o.shift().error(n)}})},t.prototype.complete=function(){var n=this;xe(function(){if(n._throwIfClosed(),!n.isStopped){n.isStopped=!0;for(var r=n.observers;r.length;)r.shift().complete()}})},t.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var n;return((n=this.observers)===null||n===void 0?void 0:n.length)>0},enumerable:!1,configurable:!0}),t.prototype._trySubscribe=function(n){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,n)},t.prototype._subscribe=function(n){return this._throwIfClosed(),this._checkFinalizedStatuses(n),this._innerSubscribe(n)},t.prototype._innerSubscribe=function(n){var r=this,o=this,i=o.hasError,s=o.isStopped,a=o.observers;return i||s?En:(this.currentObservers=null,a.push(n),new Te(function(){r.currentObservers=null,Ke(a,n)}))},t.prototype._checkFinalizedStatuses=function(n){var r=this,o=r.hasError,i=r.thrownError,s=r.isStopped;o?n.error(i):s&&n.complete()},t.prototype.asObservable=function(){var n=new M;return n.source=this,n},t.create=function(n,r){return new jt(n,r)},t}(M),jt=function(e){ae(t,e);function t(n,r){var o=e.call(this)||this;return o.destination=n,o.source=r,o}return t.prototype.next=function(n){var r,o;(o=(r=this.destination)===null||r===void 0?void 0:r.next)===null||o===void 0||o.call(r,n)},t.prototype.error=function(n){var r,o;(o=(r=this.destination)===null||r===void 0?void 0:r.error)===null||o===void 0||o.call(r,n)},t.prototype.complete=function(){var n,r;(r=(n=this.destination)===null||n===void 0?void 0:n.complete)===null||r===void 0||r.call(n)},t.prototype._subscribe=function(n){var r,o;return(o=(r=this.source)===null||r===void 0?void 0:r.subscribe(n))!==null&&o!==void 0?o:En},t}(ut),An=new M(function(e){return e.complete()});function ao(e){return e&&m(e.schedule)}function ft(e){return e[e.length-1]}function co(e){return m(ft(e))?e.pop():void 0}function Cn(e){return ao(ft(e))?e.pop():void 0}function lo(e,t){return typeof ft(e)=="number"?e.pop():t}var ht=function(e){return e&&typeof e.length=="number"&&typeof e!="function"};function In(e){return m(e==null?void 0:e.then)}function Pn(e){return m(e[lt])}function Fn(e){return Symbol.asyncIterator&&m(e==null?void 0:e[Symbol.asyncIterator])}function Rn(e){return new TypeError("You provided "+(e!==null&&typeof e=="object"?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}function uo(){return typeof Symbol!="function"||!Symbol.iterator?"@@iterator":Symbol.iterator}var Ln=uo();function Nn(e){return m(e==null?void 0:e[Ln])}function Un(e){return Yr(this,arguments,function(){var n,r,o,i;return Sn(this,function(s){switch(s.label){case 0:n=e.getReader(),s.label=1;case 1:s.trys.push([1,,9,10]),s.label=2;case 2:return[4,Y(n.read())];case 3:return r=s.sent(),o=r.value,i=r.done,i?[4,Y(void 0)]:[3,5];case 4:return[2,s.sent()];case 5:return[4,Y(o)];case 6:return[4,s.sent()];case 7:return s.sent(),[3,2];case 8:return[3,10];case 9:return n.releaseLock(),[7];case 10:return[2]}})})}function jn(e){return m(e==null?void 0:e.getReader)}function V(e){if(e instanceof M)return e;if(e!=null){if(Pn(e))return fo(e);if(ht(e))return ho(e);if(In(e))return po(e);if(Fn(e))return Hn(e);if(Nn(e))return _o(e);if(jn(e))return bo(e)}throw Rn(e)}function fo(e){return new M(function(t){var n=e[lt]();if(m(n.subscribe))return n.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")})}function ho(e){return new M(function(t){for(var n=0;n<e.length&&!t.closed;n++)t.next(e[n]);t.complete()})}function po(e){return new M(function(t){e.then(function(n){t.closed||(t.next(n),t.complete())},function(n){return t.error(n)}).then(null,Tn)})}function _o(e){return new M(function(t){var n,r;try{for(var o=K(e),i=o.next();!i.done;i=o.next()){var s=i.value;if(t.next(s),t.closed)return}}catch(a){n={error:a}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}t.complete()})}function Hn(e){return new M(function(t){vo(e,t).catch(function(n){return t.error(n)})})}function bo(e){return Hn(Un(e))}function vo(e,t){var n,r,o,i;return Gr(this,void 0,void 0,function(){var s,a;return Sn(this,function(c){switch(c.label){case 0:c.trys.push([0,5,6,11]),n=Kr(e),c.label=1;case 1:return[4,n.next()];case 2:if(r=c.sent(),!!r.done)return[3,4];if(s=r.value,t.next(s),t.closed)return[2];c.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a=c.sent(),o={error:a},[3,11];case 6:return c.trys.push([6,,9,10]),r&&!r.done&&(i=n.return)?[4,i.call(n)]:[3,8];case 7:c.sent(),c.label=8;case 8:return[3,10];case 9:if(o)throw o.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}})})}function H(e,t,n,r,o){r===void 0&&(r=0),o===void 0&&(o=!1);var i=t.schedule(function(){n(),o?e.add(this.schedule(null,r)):this.unsubscribe()},r);if(e.add(i),!o)return i}function zn(e,t){return t===void 0&&(t=0),D(function(n,r){n.subscribe(R(r,function(o){return H(r,e,function(){return r.next(o)},t)},function(){return H(r,e,function(){return r.complete()},t)},function(o){return H(r,e,function(){return r.error(o)},t)}))})}function Dn(e,t){return t===void 0&&(t=0),D(function(n,r){r.add(e.schedule(function(){return n.subscribe(r)},t))})}function go(e,t){return V(e).pipe(Dn(t),zn(t))}function mo(e,t){return V(e).pipe(Dn(t),zn(t))}function yo(e,t){return new M(function(n){var r=0;return t.schedule(function(){r===e.length?n.complete():(n.next(e[r++]),n.closed||this.schedule())})})}function wo(e,t){return new M(function(n){var r;return H(n,t,function(){r=e[Ln](),H(n,t,function(){var o,i,s;try{o=r.next(),i=o.value,s=o.done}catch(a){n.error(a);return}s?n.complete():n.next(i)},0,!0)}),function(){return m(r==null?void 0:r.return)&&r.return()}})}function qn(e,t){if(!e)throw new Error("Iterable cannot be null");return new M(function(n){H(n,t,function(){var r=e[Symbol.asyncIterator]();H(n,t,function(){r.next().then(function(o){o.done?n.complete():n.next(o.value)})},0,!0)})})}function xo(e,t){return qn(Un(e),t)}function ko(e,t){if(e!=null){if(Pn(e))return go(e,t);if(ht(e))return yo(e,t);if(In(e))return mo(e,t);if(Fn(e))return qn(e,t);if(Nn(e))return wo(e,t);if(jn(e))return xo(e,t)}throw Rn(e)}function dt(e,t){return t?ko(e,t):V(e)}var Wn=at(function(e){return function(){e(this),this.name="EmptyError",this.message="no elements in sequence"}});function X(e,t){return D(function(n,r){var o=0;n.subscribe(R(r,function(i){r.next(e.call(t,i,o++))}))})}var So=Array.isArray;function Eo(e,t){return So(t)?e.apply(void 0,$e([],ie(t))):e(t)}function Vn(e){return X(function(t){return Eo(e,t)})}var $o=Array.isArray,Mo=Object.getPrototypeOf,Oo=Object.prototype,To=Object.keys;function Ao(e){if(e.length===1){var t=e[0];if($o(t))return{args:t,keys:null};if(Co(t)){var n=To(t);return{args:n.map(function(r){return t[r]}),keys:n}}}return{args:e,keys:null}}function Co(e){return e&&typeof e=="object"&&Mo(e)===Oo}function Io(e,t){return e.reduce(function(n,r,o){return n[r]=t[o],n},{})}function Po(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=Cn(e),r=co(e),o=Ao(e),i=o.args,s=o.keys;if(i.length===0)return dt([],n);var a=new M(Fo(i,n,s?function(c){return Io(s,c)}:ce));return r?a.pipe(Vn(r)):a}function Fo(e,t,n){return n===void 0&&(n=ce),function(r){Ht(t,function(){for(var o=e.length,i=new Array(o),s=o,a=o,c=function(f){Ht(t,function(){var l=dt(e[f],t),d=!1;l.subscribe(R(r,function(h){i[f]=h,d||(d=!0,a--),a||r.next(n(i.slice()))},function(){--s||r.complete()}))},r)},u=0;u<o;u++)c(u)},r)}}function Ht(e,t,n){e?H(n,e,t):t()}function Ro(e,t,n,r,o,i,s,a){var c=[],u=0,f=0,l=!1,d=function(){l&&!c.length&&!u&&t.complete()},h=function(b){return u<r?_(b):c.push(b)},_=function(b){u++;var g=!1;V(n(b,f++)).subscribe(R(t,function(v){t.next(v)},function(){g=!0},void 0,function(){if(g)try{u--;for(var v=function(){var y=c.shift();s||_(y)};c.length&&u<r;)v();d()}catch(y){t.error(y)}}))};return e.subscribe(R(t,h,function(){l=!0,d()})),function(){}}function pt(e,t,n){return n===void 0&&(n=1/0),m(t)?pt(function(r,o){return X(function(i,s){return t(r,i,o,s)})(V(e(r,o)))},n):(typeof t=="number"&&(n=t),D(function(r,o){return Ro(r,o,e,n)}))}function Lo(e){return e===void 0&&(e=1/0),pt(ce,e)}var No=["addListener","removeListener"],Uo=["addEventListener","removeEventListener"],jo=["on","off"];function z(e,t,n,r){if(m(n)&&(r=n,n=void 0),r)return z(e,t,n).pipe(Vn(r));var o=ie(Do(e)?Uo.map(function(a){return function(c){return e[a](t,c,n)}}):Ho(e)?No.map(zt(e,t)):zo(e)?jo.map(zt(e,t)):[],2),i=o[0],s=o[1];if(!i&&ht(e))return pt(function(a){return z(a,t,n)})(V(e));if(!i)throw new TypeError("Invalid event target");return new M(function(a){var c=function(){for(var u=[],f=0;f<arguments.length;f++)u[f]=arguments[f];return a.next(1<u.length?u:u[0])};return i(c),function(){return s(c)}})}function zt(e,t){return function(n){return function(r){return e[n](t,r)}}}function Ho(e){return m(e.addListener)&&m(e.removeListener)}function zo(e){return m(e.on)&&m(e.off)}function Do(e){return m(e.addEventListener)&&m(e.removeEventListener)}function qo(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=Cn(e),r=lo(e,1/0),o=e;return o.length?o.length===1?V(o[0]):Lo(r)(dt(o,n)):An}function Wo(e,t){return D(function(n,r){var o=0;n.subscribe(R(r,function(i){return e.call(t,i,o++)&&r.next(i)}))})}function Vo(e){return D(function(t,n){var r=!1;t.subscribe(R(n,function(o){r=!0,n.next(o)},function(){r||n.next(e),n.complete()}))})}function Bo(e){return e<=0?function(){return An}:D(function(t,n){var r=0;t.subscribe(R(n,function(o){++r<=e&&(n.next(o),e<=r&&n.complete())}))})}function Dt(e){return X(function(){return e})}function Jo(e){return e===void 0&&(e=Go),D(function(t,n){var r=!1;t.subscribe(R(n,function(o){r=!0,n.next(o)},function(){return r?n.complete():n.error(e())}))})}function Go(){return new Wn}function Yo(e,t){var n=arguments.length>=2;return function(r){return r.pipe(ce,Bo(1),n?Vo(t):Jo(function(){return new Wn}))}}function qt(){const e=new Date,t=e.getDate(),n=e.getMonth()+1,r=e.getFullYear();return`${t}/${n}/${r}`}function Ko(){const e=new ut;return{read(){const n=`challenge-${qt()}`,r=localStorage.getItem(n);return r?JSON.parse(r):{}},save(t){const r=`challenge-${qt()}`,o=localStorage.getItem(r),i=o?JSON.parse(o):{};for(const s of Object.keys(t))for(const a of Object.keys(t[s])){i[s]||(i[s]={});const c=t[s][a];c!==void 0&&(i[s][a]=c)}e.next(i),localStorage.setItem(r,JSON.stringify(i))},observe(){return e.asObservable()}}}function Xo(){const e=new ut;return{read(){return localStorage.getItem("nickname")||"Votre pseudo"},save(t){e.next(t),localStorage.setItem("nickname",t)},observe(){return e.asObservable()}}}function Bn(){return{challengeResultStorage:Ko(),nicknameStorage:Xo()}}function Qo(e){let t=e.replace(/-/g,"+").replace(/_/g,"/");const n=t.length%4;n>0&&(t+="=".repeat(4-n));const r=atob(t);return JSON.parse(r)}function Zo(e){const t=JSON.stringify(e);return btoa(unescape(encodeURIComponent(t))).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")}function ei(){const e=new URL(window.location.href),n=new URLSearchParams(e.search).get("score");return n===null?null:Qo(n)}const Ae=sr(Bn());function Jn(){const{challengeResultStorage:e}=ot(Ae),[t,n]=an(e.read());return cn(()=>{const r=e.observe().subscribe(n);return()=>r.unsubscribe()},[e]),t}function _t(){const{nicknameStorage:e}=ot(Ae),[t,n]=an(e.read());return cn(()=>{const r=e.observe().subscribe(n);return()=>r.unsubscribe()},[e]),t}function ti(){const e=Jn();return C`
        <div>
            <crumbs-p>
                <h1>Classement</h1>

                <table style="border-spacing: 30px;">
                    <thead>
                        <tr>
                            <th> # </th>
                            <th> Joueur </th>
                            ${st().map(t=>C`<th>${t}</th>`)}
                        </tr>
                    </thead>

                    <tbody>
                        ${Object.entries(e).map(ni)}
                    </tbody>
                </table>
            </crumbs-p>
        </div>
    `}function ni([e,t],n){return C`
        <tr>
            <td> ${n+1} </td>
            <td> ${e} </td>
            ${st().map(r=>C`<td> ${t[r]??"-"} </td>`)}
        </tr>
    `}function ri(){const e=ot(Ae),t=_t();function n(r){e.nicknameStorage.save(r.originalTarget.value)}return C`
        <div>
            <crumbs-p>
                <h1> Votre pseudo </h1>
            </crumbs-p>

            <label>
                <crumbs-input
                    value=${t}
                    oninput=${n}>
                </crumbs-input>
            </label>
        </div>
    `}function oi(e){return C`
		<crumbs-button
			onClick=${()=>Jr(e)}>
			${e}
		</crumbs-button>
	`}function ii(){const e=_t(),t=Jn(),n={[e]:t[e]},r=!!Object.keys(t[e]||{}).length,i=`https://ferdodo.github.io/challenge?score=${Zo(n)}`;return C`
		<div>
			<crumbs-p>
				<h1>Partage</h1>

				<p>
					Partagez ce lien avec vos amis pour les défier à battre votre score : 
				</p>

				${r&&C`
						<p>
							<a href=${i}> ${i} </a>
						</p>
					`}
			</crumbs-p>
		</div>
	`}function si(){const e=_t();return C`
		<crumbs-panel panel-title="Challenge">
			<crumbs-p>
				<${ri} />

				${e&&C`
						<h1>Challenge du jour</h1>
						<p> Completez les trois puzzles pour etre classé sur le challenge du jour. </p>
						${st().map(oi)}
						<${ti} />
						<${ii} />
					`}
			</crumbs-p>
		</crumbs-panel>
	`}function Ce(e){for(var t,n,r=arguments,o=1,i="",s="",a=[0],c=function(l){o===1&&(l||(i=i.replace(/^\s*\n\s*|\s*\n\s*$/g,"")))?a.push(l?r[l]:i):o===3&&(l||i)?(a[1]=l?r[l]:i,o=2):o===2&&i==="..."&&l?a[2]=Object.assign(a[2]||{},r[l]):o===2&&i&&!l?(a[2]=a[2]||{})[i]=!0:o>=5&&(o===5?((a[2]=a[2]||{})[n]=l?i?i+r[l]:r[l]:i,o=6):(l||i)&&(a[2][n]+=l?i+r[l]:i)),i=""},u=0;u<e.length;u++){u&&(o===1&&c(),c(u));for(var f=0;f<e[u].length;f++)t=e[u][f],o===1?t==="<"?(c(),a=[a,"",null],o=3):i+=t:o===4?i==="--"&&t===">"?(o=1,i=""):i=t+i[0]:s?t===s?s="":i+=t:t==='"'||t==="'"?s=t:t===">"?(c(),o=1):o&&(t==="="?(o=5,n=i,i=""):t==="/"&&(o<5||e[u][f+1]===">")?(c(),o===3&&(a=a[0]),o=a,(a=a[0]).push(this.apply(null,o.slice(1))),o=0):t===" "||t==="	"||t===`
`||t==="\r"?(c(),o=2):i+=t),o===3&&i==="!--"&&(o=4,a=a[0])}return c(),a.length>2?a.slice(1):a[1]}var Gn={exports:{}};/*!
 * Cross-Browser Split 1.1.1
 * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>
 * Available under the MIT License
 * ECMAScript compliant, uniform cross-browser split method
 */var ai=function(t){var n=String.prototype.split,r=/()??/.exec("")[1]===t,o;return o=function(i,l,a){if(Object.prototype.toString.call(l)!=="[object RegExp]")return n.call(i,l,a);var c=[],u=(l.ignoreCase?"i":"")+(l.multiline?"m":"")+(l.extended?"x":"")+(l.sticky?"y":""),f=0,l=new RegExp(l.source,u+"g"),d,h,_,b;for(i+="",r||(d=new RegExp("^"+l.source+"$(?!\\s)",u)),a=a===t?-1>>>0:a>>>0;(h=l.exec(i))&&(_=h.index+h[0].length,!(_>f&&(c.push(i.slice(f,h.index)),!r&&h.length>1&&h[0].replace(d,function(){for(var g=1;g<arguments.length-2;g++)arguments[g]===t&&(h[g]=t)}),h.length>1&&h.index<i.length&&Array.prototype.push.apply(c,h.slice(1)),b=h[0].length,f=_,c.length>=a)));)l.lastIndex===h.index&&l.lastIndex++;return f===i.length?(b||!l.test(""))&&c.push(""):c.push(i.slice(f)),c.length>a?c.slice(0,a):c},o}(),ci=[].indexOf,li=function(e,t){if(ci)return e.indexOf(t);for(var n=0;n<e.length;++n)if(e[n]===t)return n;return-1},Ne=li,ui=fi;function fi(e){var t=e.classList;if(t)return t;var n={add:r,remove:o,contains:i,toggle:s,toString:a,length:0,item:c};return n;function r(l){var d=u();Ne(d,l)>-1||(d.push(l),f(d))}function o(l){var d=u(),h=Ne(d,l);h!==-1&&(d.splice(h,1),f(d))}function i(l){return Ne(u(),l)>-1}function s(l){return i(l)?(o(l),!1):(r(l),!0)}function a(){return e.className}function c(l){var d=u();return d[l]||null}function u(){var l=e.className;return hi(l.split(" "),di)}function f(l){var d=l.length;e.className=l.join(" "),n.length=d;for(var h=0;h<l.length;h++)n[h]=l[h];delete l[d]}}function hi(e,t){for(var n=[],r=0;r<e.length;r++)t(e[r])&&n.push(e[r]);return n}function di(e){return!!e}const pi={},_i=Object.freeze(Object.defineProperty({__proto__:null,default:pi},Symbol.toStringTag,{value:"Module"})),bi=vr(_i);var vi=ai,gi=ui,Yn=typeof window>"u"?bi:window,ee=Yn.document,mi=Yn.Text;function Kn(){var e=[];function t(){var n=[].slice.call(arguments),r=null;function o(i){var s;function a(l){var d=vi(l,/([\.#]?[^\s#.]+)/);/^\.|#/.test(d[1])&&(r=ee.createElement("div")),Wt(d,function(h){var _=h.substring(1,h.length);h&&(r?h[0]==="."?gi(r).add(_):h[0]==="#"&&r.setAttribute("id",_):r=ee.createElement(h))})}if(i!=null){if(typeof i=="string")r?r.appendChild(s=ee.createTextNode(i)):a(i);else if(typeof i=="number"||typeof i=="boolean"||i instanceof Date||i instanceof RegExp)r.appendChild(s=ee.createTextNode(i.toString()));else if(wi(i))Wt(i,o);else if(Ue(i))r.appendChild(s=i);else if(i instanceof mi)r.appendChild(s=i);else if(typeof i=="object")for(var c in i)if(typeof i[c]=="function")/^on\w+/.test(c)?function(l,d){r.addEventListener?(r.addEventListener(l.substring(2),d[l],!1),e.push(function(){r.removeEventListener(l.substring(2),d[l],!1)})):(r.attachEvent(l,d[l]),e.push(function(){r.detachEvent(l,d[l])}))}(c,i):(r[c]=i[c](),e.push(i[c](function(l){r[c]=l})));else if(c==="style")if(typeof i[c]=="string")r.style.cssText=i[c];else for(var u in i[c])(function(l,d){if(typeof d=="function")r.style.setProperty(l,d()),e.push(d(function(_){r.style.setProperty(l,_)}));else var h=i[c][l].match(/(.*)\W+!important\W*$/);h?r.style.setProperty(l,h[1],"important"):r.style.setProperty(l,i[c][l])})(u,i[c][u]);else if(c==="attrs")for(var f in i[c])r.setAttribute(f,i[c][f]);else c.substr(0,5)==="data-"?r.setAttribute(c,i[c]):r[c]=i[c];else if(typeof i=="function"){var f=i();r.appendChild(s=Ue(f)?f:ee.createTextNode(f)),e.push(i(function(d){Ue(d)&&s.parentElement?(s.parentElement.replaceChild(d,s),s=d):s.textContent=d}))}}return s}for(;n.length;)o(n.shift());return r}return t.cleanup=function(){for(var n=0;n<e.length;n++)e[n]();e.length=0},t}var yi=Gn.exports=Kn();yi.context=Kn;function Ue(e){return e&&e.nodeName&&e.nodeType}function Wt(e,t){if(e.forEach)return e.forEach(t);for(var n=0;n<e.length;n++)t(e[n],n)}function wi(e){return Object.prototype.toString.call(e)=="[object Array]"}var xi=Gn.exports;const le=dn(xi);function L(e){if(!e.shadowRoot)throw new Error("There is no shadow root on the element !");return e.shadowRoot}function ue(e){const t=Array.isArray(e)?e:[e],n=document.createElement("template");return n.innerHTML=t.map(r=>r.outerHTML).join(""),n}function Xn(){return!document.hidden}function ki(){const e=z(document,"visibilitychange"),t=z(window,"focus").pipe(Dt(!0)),n=z(window,"blur").pipe(Dt(!1)),r=qo(t,n);return Po(e,r).pipe(X(([,o])=>Xn()&&o),Wo(o=>o),Yo())}const Si=z(document,"mouseover");async function Ei(){Xn()||await Promise.race([ki().toPromise(),Si.toPromise()])}async function $i(){await new Promise(e=>setTimeout(e,400)),await Ei(),await new Promise(e=>setTimeout(e,400))}const Mi=$i();function P(e,t){const n=e.querySelector(t);if(!n)throw new Error("Failed to find element ${ selector } !");return n}const Oi=Ce.bind(le),Ti="crumbs-p",Ai=ue(Oi`
	<style>
		:host {
			display: block;
		}

		p {
			font-size: 1rem;
		}

		::slotted(code) {
			padding: 5px;
			border-radius: 5px;
			display: inline-block;
			font-size: 0.9rem;
		}

		::slotted(code[block]) {
			display: block;
			margin: 1rem 0;
			white-space: pre;
		}

		@media screen and (min-width: 800px) {
			p {
				font-size: 1.4rem;
			}
		}
	</style>

	<p>
		<slot></slot>
	</p>
`);class Ci extends HTMLElement{async connectedCallback(){this.attachShadow({mode:"open"});const t=L(this),n=Ai.content.cloneNode(!0);t.appendChild(n)}}customElements.define(Ti,Ci);const Ii=Ce.bind(le),Pi="crumbs-panel",Fi=ue(Ii`
	<style>
		:host {
			display: block;
		}

		#panel-container {
			display: grid;
			grid-column-gap: 0px;
			grid-row-gap: 0px;
			transition: grid-template-columns .5s cubic-bezier(.12,1.03,.11,.99), grid-template-rows .5s cubic-bezier(.12,1.03,.11,.99);
			height: 100%;
		}

		#panel {
			border-radius: 0.3rem;
			padding: 1.7rem;
			grid-area: 2 / 2 / 3 / 3;
			background-color: #ffffff00;
			box-shadow: 0px 0px 9px 5px rgba(28, 44, 83, 0.04);
			box-shadow: 2px 10px 50px 5px rgba(26, 25, 25, 0.47);
			transition: background-color .5s cubic-bezier(.12,1.03,.11,.99);
			color: black;
			overflow: auto;
			position: relative;
		}

		#panel-title-container {
			grid-area: 2 / 2 / 3 / 3;
			z-index: 0;
		}

		#panel-content {
			visibility: collapse;
			transition: opacity 1s cubic-bezier(.12,1.03,.11,.99);
			z-index: 1;
			position: relative;
			height: calc(100% - 2.5rem);
		}

		#panel-loading-container {
			grid-area: 2 / 2 / 3 / 3;
			overflow: hidden;
			backdrop-filter: blur(0.3rem);
		}

		#panel-title {
			background: linear-gradient(0deg, rgba(255, 255, 255, 0.46) 0%, rgba(255, 255, 255, 0.44) 100%);
			display: inline-block;
			border-radius: 0.3rem;
			padding-left: 1rem;
			padding-right: 1rem;
			opacity: 0;
			transition-duration: 0.2s;
			transition-timing-function: cubic-bezier(.12,1.03,.11,.99);
			transition-delay: 0.4s;
			transition-property: opacity;
		}

		#panel-loading {
			border-radius: 0.3rem;
			width: 75%;
			height: 100%;
			background-color: #ffffff55;
			box-shadow: 0px 0px 9px 5px rgba(28, 44, 83, 0.04);

			transition-duration: 1s;
			transition-timing-function: cubic-bezier(.17,.84,.44,1);
			transition-delay: 0s;
			transition-property: width, background-color;

			color: black;
			overflow: auto;

			position: relative;
		}

		* {
			scrollbar-width: auto;
			scrollbar-color: #ffffff90 #ffffff00;
		}

		*::-webkit-scrollbar {
			width: 8px;
		}

		*::-webkit-scrollbar-track {
			background: #ffffff00;
		}

		*::-webkit-scrollbar-thumb {
			background-color: #ffffff90;
			border-radius: 10px;
			border: 3px solid #ffffff00;
		}
	</style>

	<div id="panel-container" style="grid-template-columns: 20% 1fr 20%; grid-template-rows: 1rem 1fr 40%;">
		<div id="panel-loading-container">
			<div id="panel-loading"></div>
		</div>

		<div id="panel">
			<div id="panel-content" style="opacity: 0;">
				<slot></slot>
			</div>
		</div>

		<div id="panel-title-container">
			<div id="panel-title">
				<crumbs-p style="line-height: 0;">
					<b id="panel-title-content"> </b>
				</crumbs-p>
			</div>
		</div>
	</div>
`);class Ri extends HTMLElement{constructor(){super(...arguments);A(this,"contentTimeoutElapsed",!1);A(this,"contentLoaded",!1);A(this,"connected",!1);A(this,"loading","100");A(this,"scrolled",!1);A(this,"scrolledSubscription",null)}static get observedAttributes(){return["panel-loading","panel-title"]}async connectedCallback(){this.attachShadow({mode:"open"}),await Mi;const n=L(this),r=Fi.content.cloneNode(!0);n.appendChild(r);const o=this.getAttribute("panel-loading");o!==null&&Vt(o)&&(this.loading=o),setTimeout(()=>{const i=P(n,"#panel-container");i.style.gridTemplateColumns="1rem 1fr 1rem",i.style.gridTemplateRows="1rem 1fr 1rem";const s=P(n,"#panel");s.style.backgroundColor="#ffffff40",this.scrolledSubscription=z(s,"scroll").pipe(X(a=>a.target.scrollTop),X(a=>a!==0)).subscribe(a=>{this.scrolled=a,this.render()}),this.render()},10),setTimeout(()=>{this.contentTimeoutElapsed=!0,this.render()},400),this.connected=!0,this.render()}render(){const n=L(this),r=P(n,"#panel-content"),o=P(n,"#panel-loading"),i=P(n,"#panel"),s=P(n,"#panel-title-content");this.contentTimeoutElapsed&&Li(this.loading)?(r.style.visibility="visible",r.style.opacity="1",i.style.overflow="auto"):(r.style.visibility="collapse",r.style.opacity="0",i.style.overflow="hidden"),o.style.width=`${this.loading}%`;const a=P(n,"#panel-title");this.loading==="100"&&this.getAttribute("panel-title")&&!this.scrolled?setTimeout(()=>{a.style.opacity="1",s.innerHTML=this.getAttribute("panel-title")||"",r.style.paddingTop="2.5rem"},10):(r.style.paddingTop="inherit",a.style.opacity="0")}attributeChangedCallback(){if(this.shadowRoot&&this.connected){const n=this.getAttribute("panel-loading");n!==null&&Vt(n)?this.loading=n:n===null&&(this.loading="100"),this.render()}}disconnectedCallback(){var n;(n=this.scrolledSubscription)==null||n.unsubscribe()}}function Vt(e){const t=Number(e),n=Math.floor(t);return n===t&&Number.isInteger(n)&&Number.isFinite(n)&&n<=100&&n>=0}function Li(e){return e===null||e==="100"}customElements.define(Pi,Ri);const Ni=Ce.bind(le),Ui="crumbs-input",ji=ue(Ni`
	<style>
		:host {
			display: block;
		}

		input {
			font-size: 1rem;
			font-family: inherit;
			background-color: transparent;
			padding: 0.4rem;
			border-radius: 10px;
			border-color: transparent;
			padding: 10px 25px;

			box-shadow: inset 2px 2px 6px 0px rgba(0, 0, 0, 0.29),
				inset -2px -2px 3px #ffffffa8,
				2px 2px 1px 0px #ffffff1c,
				-2px -2px 1px rgba(0, 0, 0, 0.02);

			border-width: 0;
			margin: 0.1rem;
		}

		@media screen and (min-width: 800px) {
			input {
				font-size: 1.4rem;
			}
		}

		input:focus, input:focus-visible {
			outline: none;
		}
	</style>

	<input type="text"/>
`);class Hi extends HTMLElement{static get observedAttributes(){return["value"]}async connectedCallback(){this.attachShadow({mode:"open"});const t=L(this),n=ji.content.cloneNode(!0);t.appendChild(n);const r=P(t,"input"),o=this.getAttribute("value");r instanceof HTMLInputElement&&o&&(r.value=o)}attributeChangedCallback(t,n,r){if(t==="value"&&this.shadowRoot){const o=L(this),i=P(o,"input");i instanceof HTMLInputElement&&(i.value=r)}}}customElements.define(Ui,Hi);const Qe=Ce.bind(le),zi="crumbs-tabs",Di=ue(Qe`
	<style>
		:host {
			display: block;
		}

		.selected-title {
			background: linear-gradient(0deg, rgba(255, 255, 255, 0.46) 0%, rgba(255, 255, 255, 0.44) 100%);
			border-radius: 0.3rem;
		}

		#tabs {
			display: flex;
			justify-content: space-around;

			& > div {
				padding: 10px;
				cursor: pointer;
				width: 100%;
				text-align: center;
				user-select: none;
			}
		}

		#content {
			display: grid;
			grid-auto-flow: column;
			overflow: scroll;
			grid-auto-columns: 100%;
			scroll-snap-type: x mandatory;
			scroll-behavior: smooth;
			-ms-overflow-style: none;
			scrollbar-width: none;

			& > div {
				scroll-snap-align: start;
			}
		}

		#content::-webkit-scrollbar {
			display: none;
		}

		#container {
			display: grid;
			grid-template-rows: 1fr auto;
			height: 100%;
		}
	</style>

	<div id="container">
		<div id="content"></div>
		<div id="tabs"></div>
	</div>
`);class qi extends HTMLElement{constructor(){super(...arguments);A(this,"selected",1);A(this,"subscriptions",[])}async connectedCallback(){this.attachShadow({mode:"open"});const n=L(this),r=Di.content.cloneNode(!0);n.appendChild(r);const o=this.getAttribute("selected");this.selected=Number.parseInt(o||"1");const i=n.querySelector("#tabs"),s=n.querySelector("#content");if(!i)throw new Error("Tabs not found");if(!s)throw new Error("Content not found");for(const a of{[Symbol.iterator]:()=>this.getSlots()}){if(a.startsWith("content-")){const c=Qe`<div id=${`${a}`}> <slot name=${a}></slot> </div>`;c instanceof Element&&s.appendChild(c)}if(a.startsWith("title-")){const c=Qe`<div id=${a}> <crumbs-p> <slot name=${a}></slot> </crumbs-p> </div>`;c instanceof Element&&i.appendChild(c)}}this.subscriptions=[...i.children].map((a,c)=>z(a,"click").subscribe(()=>{const u=a.id.replace("title-","content-"),f=n.querySelector(`#${u}`);f instanceof HTMLElement&&s instanceof HTMLElement&&f.scrollIntoView({behavior:"smooth",block:"nearest",inline:"center"}),this.selected=c+1,this.render()})),this.render()}render(){const r=L(this).querySelector("#tabs");if(!r)throw new Error("Tabs not found");[...r.children].forEach((o,i)=>{i+1===this.selected?o instanceof HTMLElement&&o.classList.add("selected-title"):o instanceof HTMLElement&&o.classList.remove("selected-title")})}disconnectedCallback(){for(const n of this.subscriptions)n.unsubscribe()}*getSlots(){for(const n of Array.from(this.children)){const r=n.getAttribute("slot");r&&(yield r)}}}customElements.define(zi,qi);const Wi=on.bind(le),Vi="crumbs-button",Bi=ue(Wi`
	<style>
		:host {
			display: inline-block;
		}

		/* ❤️ https://codepen.io/yuhomyan/pen/OJMejWJ */

		.custom-btn {
			font-family: ds-notes-sans;
			font-size: 1rem;
			display: grid;
			place-content: center;
			border-radius: 5px;
			padding: 10px 25px;
			font-weight: 500;
			background: transparent;
			cursor: pointer;
			transition: all 0.3s ease;
			position: relative;
			box-shadow:inset 2px 2px 2px 0px rgba(255,255,255,.5),
			7px 7px 20px 0px rgba(0,0,0,.1),
			4px 4px 5px 0px rgba(0,0,0,.1);
			outline: none;
			grid-area: 2 / 2 / 3 / 3;
			user-select: none;
		}

		@media screen and (min-width: 800px) {
			.custom-btn {
				font-size: 1.4rem;
			}
		}

		.btn-16 {
			border: none;
			color: #000;
		}
		.btn-16:after {
			position: absolute;
			content: "";
			width: 0;
			height: 100%;
			top: 0;
			left: 0;
			direction: rtl;
			z-index: -1;
			box-shadow: -1px -1px 5px 0px #fff0, -1px -1px 5px 0px #fff, 7px 7px 10px 0px #0002, 4px 4px 5px 0px #0001;
			transition: all 0.3s ease;
			border-radius: 5px;
			background-color: #fff3;
		}
		.btn-16:hover {
			color: #000;
		}
		.btn-16:hover:after {
			left: auto;
			right: 0;
			width: 100%;
		}
		.btn-16:active {
			top: 2px;
		}

		.button-container {
			display: grid;
			grid-template-columns: 0.4rem 1fr 0.4rem;
			grid-template-rows: 0.4rem 1fr 0.4rem; 
		}

		.progress-container {
			grid-area: 2 / 2 / 3 / 3;
		}

		#progress {
			background-color: #fff3;
			height: 100%;
			width: 0%;
			border-radius: 5px;
			transition: width 0.3s ease-in-out;
		}

	</style>

	<div className="button-container">
		<div className="custom-btn btn-16">
			<slot></slot>
		</div>
		<div className="progress-container">
			<div id="progress"></div>
		</div>
	</div>
`);class Ji extends HTMLElement{constructor(){super(...arguments);A(this,"clickSubscription",null);A(this,"_progress","0")}static get observedAttributes(){return["progress"]}async connectedCallback(){this.attachShadow({mode:"open"});const n=L(this);this._progress=this.getAttribute("progress")||"0",n.appendChild(Bi.content.cloneNode(!0)),this.render()}attributeChangedCallback(){if(this.shadowRoot){const n=this.getAttribute("progress");Gi(n)&&(this._progress=n===null?"0":n),this.render()}}render(){const n=L(this),r=P(n,"#progress");r.style.width=`${this._progress}%`}disconnectedCallback(){var n;(n=this.clickSubscription)==null||n.unsubscribe()}}function Gi(e){if(e===null)return!0;const t=Number(e),n=Math.floor(t);return n===t&&Number.isInteger(n)&&Number.isFinite(n)&&n<=100&&n>=0}customElements.define(Vi,Ji);const bt=Bn(),Bt=ei();Bt&&bt.challengeResultStorage.save(Bt);window.registerScore=(e,t,n)=>{bt.challengeResultStorage.save({[e]:{[t]:n}})};ir(C`<${Ae.Provider} value=${bt}> <${si} /> <//>`,document.body);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
